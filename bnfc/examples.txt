{-if (3+4 < 8) then ... 
if ((s memberof S = true) and ((4+6 = 9)=true) or (true = true)

function x : -> BOOLEAN

x := (3 + 4 < undef) and (x > 5) and 
-}

-- examples:
{-1.4 + 3.6         --> 5.0
"a" + 3.6         --> "a3.6"
1 + "a"           --> "1a"
1 + 3             --> 4
1.4 + "asm" - "c" --> compile time error (due to types)
1.4 + "asm" + "c" --> "1.4asmc"
1564654654.4 + "" --> "1.5646547E12"
true + false      --> compile time error (due to types)
true + "" + false --> "truefalse"
"Agent: " + self  --> "Agent: @234efd" (implementation dependent)


(3 + 4 < undef) = (x > 5)   -- fine 
(3 + 4 < undef) and (x > 5) -- not so easy...
true < false
--(1+3 < true) and (4+2)  -- should be an error
a + b 
123 + 4
f(59) - 4
x(2,3,true,false,"adsf",1.4) and true

--undef and self             -- should be an error
undef = true and self = true            -- should be fine
undef + 4 > 5 - undef 


4
3+4*5-6

{-4 memberof {1,2,3,4,5,6} and true

"test" memberof undef

(true memberof f(a)) xor (3+4 < string)-}

{-true = true and false = true
1 < 1 and 2 > 4

true and false

--(true and x) xor (3 + 4 < string(2,4,5,6asd,"asf"))
-}--}

--"a" + 3.6         --> "a3.6"
1 + "a"           --> "1a"  