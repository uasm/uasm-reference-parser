/*
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.uasm.term.lang.services.TermDslGrammarAccess;

@SuppressWarnings("all")
public class TermDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TermDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BasicExpression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_BasicExpression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_ConditionalTerm_EndifKeyword_6_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TermDslGrammarAccess) access;
		match_BasicExpression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getBasicExpressionAccess().getLeftParenthesisKeyword_1_0());
		match_BasicExpression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getBasicExpressionAccess().getLeftParenthesisKeyword_1_0());
		match_ConditionalTerm_EndifKeyword_6_q = new TokenAlias(false, true, grammarAccess.getConditionalTermAccess().getEndifKeyword_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEnumTermRule())
			return getEnumTermToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EnumTerm:
	 * 	ID;
	 */
	protected String getEnumTermToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BasicExpression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_BasicExpression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BasicExpression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_BasicExpression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalTerm_EndifKeyword_6_q.equals(syntax))
				emit_ConditionalTerm_EndifKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' literals+=Literal
	 *     (rule start) (ambiguity) '(' term+=Term
	 *     (rule start) (ambiguity) '<' literal+=Literal
	 *     (rule start) (ambiguity) '<' term+=Term
	 *     (rule start) (ambiguity) '<' term=Term
	 *     (rule start) (ambiguity) '@' rule=IdRule
	 *     (rule start) (ambiguity) '[' literal+=Literal
	 *     (rule start) (ambiguity) '[' start=Literal
	 *     (rule start) (ambiguity) '[' start=Term
	 *     (rule start) (ambiguity) '[' term+=Term
	 *     (rule start) (ambiguity) '[' term=Term
	 *     (rule start) (ambiguity) 'case' caseTerm=Term
	 *     (rule start) (ambiguity) 'exists' unique='unique'
	 *     (rule start) (ambiguity) 'exists' varTerm+=VariableTerm
	 *     (rule start) (ambiguity) 'forall' varTerm+=VariableTerm
	 *     (rule start) (ambiguity) 'if' cond=Term
	 *     (rule start) (ambiguity) 'let' varTerm+=VariableTerm
	 *     (rule start) (ambiguity) 'pick' varTerm=VariableTerm
	 *     (rule start) (ambiguity) 'return' term=Term
	 *     (rule start) (ambiguity) '{' literal+=Literal
	 *     (rule start) (ambiguity) '{' term+=Term
	 *     (rule start) (ambiguity) '{' term1=Term
	 *     (rule start) (ambiguity) '{' term=Term
	 *     (rule start) (ambiguity) '|' enumTerm=EnumerableTerm
	 *     (rule start) (ambiguity) EnumTerm (rule start)
	 *     (rule start) (ambiguity) function=FunctionTerm
	 *     (rule start) (ambiguity) op='-'
	 *     (rule start) (ambiguity) op='not'
	 *     (rule start) (ambiguity) result='result'
	 *     (rule start) (ambiguity) text=STN
	 *     (rule start) (ambiguity) val='false'
	 *     (rule start) (ambiguity) val='self'
	 *     (rule start) (ambiguity) val='true'
	 *     (rule start) (ambiguity) val='undef'
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) valueDec=TK_FLOAT
	 *     (rule start) (ambiguity) {BinaryExpression.left=}
	 *     (rule start) (ambiguity) {CondTernaryExpression.cond=}
	 */
	protected void emit_BasicExpression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) op='-'
	 *     (rule start) (ambiguity) op='not'
	 *     (rule start) (ambiguity) {BinaryExpression.left=}
	 *     (rule start) (ambiguity) {CondTernaryExpression.cond=}
	 */
	protected void emit_BasicExpression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'endif'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elseTerm=Term (ambiguity) (rule end)
	 */
	protected void emit_ConditionalTerm_EndifKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
