/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.uasm.term.lang.termDsl.Domain;
import org.uasm.term.lang.termDsl.StructuredDomain;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Structured Domain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.StructuredDomainImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.StructuredDomainImpl#getDomainSet <em>Domain Set</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.StructuredDomainImpl#getDomainBag <em>Domain Bag</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.StructuredDomainImpl#getDomainList <em>Domain List</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.StructuredDomainImpl#getDomainMap <em>Domain Map</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StructuredDomainImpl extends DomainImpl implements StructuredDomain
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getDomainSet() <em>Domain Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainSet()
   * @generated
   * @ordered
   */
  protected Domain domainSet;

  /**
   * The cached value of the '{@link #getDomainBag() <em>Domain Bag</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainBag()
   * @generated
   * @ordered
   */
  protected Domain domainBag;

  /**
   * The cached value of the '{@link #getDomainList() <em>Domain List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainList()
   * @generated
   * @ordered
   */
  protected Domain domainList;

  /**
   * The cached value of the '{@link #getDomainMap() <em>Domain Map</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainMap()
   * @generated
   * @ordered
   */
  protected EList<Domain> domainMap;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StructuredDomainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.STRUCTURED_DOMAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain getDomainSet()
  {
    return domainSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomainSet(Domain newDomainSet, NotificationChain msgs)
  {
    Domain oldDomainSet = domainSet;
    domainSet = newDomainSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET, oldDomainSet, newDomainSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomainSet(Domain newDomainSet)
  {
    if (newDomainSet != domainSet)
    {
      NotificationChain msgs = null;
      if (domainSet != null)
        msgs = ((InternalEObject)domainSet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET, null, msgs);
      if (newDomainSet != null)
        msgs = ((InternalEObject)newDomainSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET, null, msgs);
      msgs = basicSetDomainSet(newDomainSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET, newDomainSet, newDomainSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain getDomainBag()
  {
    return domainBag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomainBag(Domain newDomainBag, NotificationChain msgs)
  {
    Domain oldDomainBag = domainBag;
    domainBag = newDomainBag;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG, oldDomainBag, newDomainBag);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomainBag(Domain newDomainBag)
  {
    if (newDomainBag != domainBag)
    {
      NotificationChain msgs = null;
      if (domainBag != null)
        msgs = ((InternalEObject)domainBag).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG, null, msgs);
      if (newDomainBag != null)
        msgs = ((InternalEObject)newDomainBag).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG, null, msgs);
      msgs = basicSetDomainBag(newDomainBag, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG, newDomainBag, newDomainBag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain getDomainList()
  {
    return domainList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomainList(Domain newDomainList, NotificationChain msgs)
  {
    Domain oldDomainList = domainList;
    domainList = newDomainList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST, oldDomainList, newDomainList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomainList(Domain newDomainList)
  {
    if (newDomainList != domainList)
    {
      NotificationChain msgs = null;
      if (domainList != null)
        msgs = ((InternalEObject)domainList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST, null, msgs);
      if (newDomainList != null)
        msgs = ((InternalEObject)newDomainList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST, null, msgs);
      msgs = basicSetDomainList(newDomainList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST, newDomainList, newDomainList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Domain> getDomainMap()
  {
    if (domainMap == null)
    {
      domainMap = new EObjectContainmentEList<Domain>(Domain.class, this, TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP);
    }
    return domainMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET:
        return basicSetDomainSet(null, msgs);
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG:
        return basicSetDomainBag(null, msgs);
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST:
        return basicSetDomainList(null, msgs);
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP:
        return ((InternalEList<?>)getDomainMap()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.STRUCTURED_DOMAIN__TYPE:
        return getType();
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET:
        return getDomainSet();
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG:
        return getDomainBag();
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST:
        return getDomainList();
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP:
        return getDomainMap();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.STRUCTURED_DOMAIN__TYPE:
        setType((String)newValue);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET:
        setDomainSet((Domain)newValue);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG:
        setDomainBag((Domain)newValue);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST:
        setDomainList((Domain)newValue);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP:
        getDomainMap().clear();
        getDomainMap().addAll((Collection<? extends Domain>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.STRUCTURED_DOMAIN__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET:
        setDomainSet((Domain)null);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG:
        setDomainBag((Domain)null);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST:
        setDomainList((Domain)null);
        return;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP:
        getDomainMap().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.STRUCTURED_DOMAIN__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_SET:
        return domainSet != null;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_BAG:
        return domainBag != null;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_LIST:
        return domainList != null;
      case TermDslPackage.STRUCTURED_DOMAIN__DOMAIN_MAP:
        return domainMap != null && !domainMap.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //StructuredDomainImpl
