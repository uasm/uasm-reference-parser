/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.uasm.term.lang.termDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TermDslFactoryImpl extends EFactoryImpl implements TermDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TermDslFactory init()
  {
    try
    {
      TermDslFactory theTermDslFactory = (TermDslFactory)EPackage.Registry.INSTANCE.getEFactory(TermDslPackage.eNS_URI);
      if (theTermDslFactory != null)
      {
        return theTermDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TermDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TermDslPackage.EXPRESSION: return createExpression();
      case TermDslPackage.BASIC_TERM: return createBasicTerm();
      case TermDslPackage.TUPLE_TERM: return createTupleTerm();
      case TermDslPackage.FUNCTION_TERM: return createFunctionTerm();
      case TermDslPackage.ENUMERABLE_TERM: return createEnumerableTerm();
      case TermDslPackage.LOCATION_TERM: return createLocationTerm();
      case TermDslPackage.LITERAL: return createLiteral();
      case TermDslPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case TermDslPackage.KERNEL_LITERAL: return createKernelLiteral();
      case TermDslPackage.INTERVAL_LITERAL: return createIntervalLiteral();
      case TermDslPackage.SET_LITERAL: return createSetLiteral();
      case TermDslPackage.LIST_LITERAL: return createListLiteral();
      case TermDslPackage.BAG_LITERAL: return createBagLiteral();
      case TermDslPackage.MAP_LITERAL: return createMapLiteral();
      case TermDslPackage.FOR_ALL_TERM: return createForAllTerm();
      case TermDslPackage.EXISTS_TERM: return createExistsTerm();
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM: return createSizeOfEnumerableTerm();
      case TermDslPackage.PICK_TERM: return createPickTerm();
      case TermDslPackage.CONDITIONAL_TERM: return createConditionalTerm();
      case TermDslPackage.CASE_TERM: return createCaseTerm();
      case TermDslPackage.LET_TERM: return createLetTerm();
      case TermDslPackage.RULE_AS_TERM: return createRuleAsTerm();
      case TermDslPackage.RETURN_TERM: return createReturnTerm();
      case TermDslPackage.COMPREHENSION_TERM: return createComprehensionTerm();
      case TermDslPackage.SET_COMPREHENSION_TERM: return createSetComprehensionTerm();
      case TermDslPackage.LIST_COMPREHENSION_TERM: return createListComprehensionTerm();
      case TermDslPackage.BAG_COMPREHENSION_TERM: return createBagComprehensionTerm();
      case TermDslPackage.MAP_COMPREHENSION_TERM: return createMapComprehensionTerm();
      case TermDslPackage.NUMBER_RANGE_TERM: return createNumberRangeTerm();
      case TermDslPackage.STRUCTURE_TERM: return createStructureTerm();
      case TermDslPackage.SET_TERM: return createSetTerm();
      case TermDslPackage.LIST_TERM: return createListTerm();
      case TermDslPackage.BAG_TERM: return createBagTerm();
      case TermDslPackage.MAP_TERM: return createMapTerm();
      case TermDslPackage.STRING_LITERAL: return createStringLiteral();
      case TermDslPackage.CHAR_LITERAL: return createCharLiteral();
      case TermDslPackage.DOMAIN: return createDomain();
      case TermDslPackage.STRUCTURED_DOMAIN: return createStructuredDomain();
      case TermDslPackage.EXTENDABLE_DOMAIN: return createExtendableDomain();
      case TermDslPackage.BASIC_DOMAIN: return createBasicDomain();
      case TermDslPackage.NUMBER_LITERAL: return createNumberLiteral();
      case TermDslPackage.TUPLE_LITERAL: return createTupleLiteral();
      case TermDslPackage.COND_TERNARY_EXPRESSION: return createCondTernaryExpression();
      case TermDslPackage.BINARY_EXPRESSION: return createBinaryExpression();
      case TermDslPackage.BOOLEAN_NEGATION: return createBooleanNegation();
      case TermDslPackage.ARITHMETIC_SIGNED: return createArithmeticSigned();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TermDslPackage.BASIC_DOMAIN_ENUM:
        return createBasicDomainEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TermDslPackage.BASIC_DOMAIN_ENUM:
        return convertBasicDomainEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicTerm createBasicTerm()
  {
    BasicTermImpl basicTerm = new BasicTermImpl();
    return basicTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleTerm createTupleTerm()
  {
    TupleTermImpl tupleTerm = new TupleTermImpl();
    return tupleTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionTerm createFunctionTerm()
  {
    FunctionTermImpl functionTerm = new FunctionTermImpl();
    return functionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumerableTerm createEnumerableTerm()
  {
    EnumerableTermImpl enumerableTerm = new EnumerableTermImpl();
    return enumerableTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocationTerm createLocationTerm()
  {
    LocationTermImpl locationTerm = new LocationTermImpl();
    return locationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KernelLiteral createKernelLiteral()
  {
    KernelLiteralImpl kernelLiteral = new KernelLiteralImpl();
    return kernelLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntervalLiteral createIntervalLiteral()
  {
    IntervalLiteralImpl intervalLiteral = new IntervalLiteralImpl();
    return intervalLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetLiteral createSetLiteral()
  {
    SetLiteralImpl setLiteral = new SetLiteralImpl();
    return setLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListLiteral createListLiteral()
  {
    ListLiteralImpl listLiteral = new ListLiteralImpl();
    return listLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BagLiteral createBagLiteral()
  {
    BagLiteralImpl bagLiteral = new BagLiteralImpl();
    return bagLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapLiteral createMapLiteral()
  {
    MapLiteralImpl mapLiteral = new MapLiteralImpl();
    return mapLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForAllTerm createForAllTerm()
  {
    ForAllTermImpl forAllTerm = new ForAllTermImpl();
    return forAllTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExistsTerm createExistsTerm()
  {
    ExistsTermImpl existsTerm = new ExistsTermImpl();
    return existsTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SizeOfEnumerableTerm createSizeOfEnumerableTerm()
  {
    SizeOfEnumerableTermImpl sizeOfEnumerableTerm = new SizeOfEnumerableTermImpl();
    return sizeOfEnumerableTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PickTerm createPickTerm()
  {
    PickTermImpl pickTerm = new PickTermImpl();
    return pickTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalTerm createConditionalTerm()
  {
    ConditionalTermImpl conditionalTerm = new ConditionalTermImpl();
    return conditionalTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaseTerm createCaseTerm()
  {
    CaseTermImpl caseTerm = new CaseTermImpl();
    return caseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetTerm createLetTerm()
  {
    LetTermImpl letTerm = new LetTermImpl();
    return letTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleAsTerm createRuleAsTerm()
  {
    RuleAsTermImpl ruleAsTerm = new RuleAsTermImpl();
    return ruleAsTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnTerm createReturnTerm()
  {
    ReturnTermImpl returnTerm = new ReturnTermImpl();
    return returnTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComprehensionTerm createComprehensionTerm()
  {
    ComprehensionTermImpl comprehensionTerm = new ComprehensionTermImpl();
    return comprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetComprehensionTerm createSetComprehensionTerm()
  {
    SetComprehensionTermImpl setComprehensionTerm = new SetComprehensionTermImpl();
    return setComprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListComprehensionTerm createListComprehensionTerm()
  {
    ListComprehensionTermImpl listComprehensionTerm = new ListComprehensionTermImpl();
    return listComprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BagComprehensionTerm createBagComprehensionTerm()
  {
    BagComprehensionTermImpl bagComprehensionTerm = new BagComprehensionTermImpl();
    return bagComprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapComprehensionTerm createMapComprehensionTerm()
  {
    MapComprehensionTermImpl mapComprehensionTerm = new MapComprehensionTermImpl();
    return mapComprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberRangeTerm createNumberRangeTerm()
  {
    NumberRangeTermImpl numberRangeTerm = new NumberRangeTermImpl();
    return numberRangeTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StructureTerm createStructureTerm()
  {
    StructureTermImpl structureTerm = new StructureTermImpl();
    return structureTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetTerm createSetTerm()
  {
    SetTermImpl setTerm = new SetTermImpl();
    return setTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListTerm createListTerm()
  {
    ListTermImpl listTerm = new ListTermImpl();
    return listTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BagTerm createBagTerm()
  {
    BagTermImpl bagTerm = new BagTermImpl();
    return bagTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapTerm createMapTerm()
  {
    MapTermImpl mapTerm = new MapTermImpl();
    return mapTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CharLiteral createCharLiteral()
  {
    CharLiteralImpl charLiteral = new CharLiteralImpl();
    return charLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StructuredDomain createStructuredDomain()
  {
    StructuredDomainImpl structuredDomain = new StructuredDomainImpl();
    return structuredDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtendableDomain createExtendableDomain()
  {
    ExtendableDomainImpl extendableDomain = new ExtendableDomainImpl();
    return extendableDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicDomain createBasicDomain()
  {
    BasicDomainImpl basicDomain = new BasicDomainImpl();
    return basicDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleLiteral createTupleLiteral()
  {
    TupleLiteralImpl tupleLiteral = new TupleLiteralImpl();
    return tupleLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondTernaryExpression createCondTernaryExpression()
  {
    CondTernaryExpressionImpl condTernaryExpression = new CondTernaryExpressionImpl();
    return condTernaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryExpression createBinaryExpression()
  {
    BinaryExpressionImpl binaryExpression = new BinaryExpressionImpl();
    return binaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanNegation createBooleanNegation()
  {
    BooleanNegationImpl booleanNegation = new BooleanNegationImpl();
    return booleanNegation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticSigned createArithmeticSigned()
  {
    ArithmeticSignedImpl arithmeticSigned = new ArithmeticSignedImpl();
    return arithmeticSigned;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicDomainEnum createBasicDomainEnumFromString(EDataType eDataType, String initialValue)
  {
    BasicDomainEnum result = BasicDomainEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBasicDomainEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDslPackage getTermDslPackage()
  {
    return (TermDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TermDslPackage getPackage()
  {
    return TermDslPackage.eINSTANCE;
  }

} //TermDslFactoryImpl
