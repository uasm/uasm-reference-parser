/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.uasm.term.lang.termDsl.ExistsTerm;
import org.uasm.term.lang.termDsl.Expression;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exists Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.ExistsTermImpl#getUnique <em>Unique</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.ExistsTermImpl#getVarTerm <em>Var Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.ExistsTermImpl#getInTerm <em>In Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.ExistsTermImpl#getWithTerm <em>With Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExistsTermImpl extends BasicTermImpl implements ExistsTerm
{
  /**
   * The default value of the '{@link #getUnique() <em>Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnique()
   * @generated
   * @ordered
   */
  protected static final String UNIQUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnique() <em>Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnique()
   * @generated
   * @ordered
   */
  protected String unique = UNIQUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getVarTerm() <em>Var Term</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarTerm()
   * @generated
   * @ordered
   */
  protected EList<String> varTerm;

  /**
   * The cached value of the '{@link #getInTerm() <em>In Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInTerm()
   * @generated
   * @ordered
   */
  protected EList<Expression> inTerm;

  /**
   * The cached value of the '{@link #getWithTerm() <em>With Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWithTerm()
   * @generated
   * @ordered
   */
  protected Expression withTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistsTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.EXISTS_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUnique()
  {
    return unique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnique(String newUnique)
  {
    String oldUnique = unique;
    unique = newUnique;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.EXISTS_TERM__UNIQUE, oldUnique, unique));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getVarTerm()
  {
    if (varTerm == null)
    {
      varTerm = new EDataTypeEList<String>(String.class, this, TermDslPackage.EXISTS_TERM__VAR_TERM);
    }
    return varTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getInTerm()
  {
    if (inTerm == null)
    {
      inTerm = new EObjectContainmentEList<Expression>(Expression.class, this, TermDslPackage.EXISTS_TERM__IN_TERM);
    }
    return inTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getWithTerm()
  {
    return withTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWithTerm(Expression newWithTerm, NotificationChain msgs)
  {
    Expression oldWithTerm = withTerm;
    withTerm = newWithTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.EXISTS_TERM__WITH_TERM, oldWithTerm, newWithTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWithTerm(Expression newWithTerm)
  {
    if (newWithTerm != withTerm)
    {
      NotificationChain msgs = null;
      if (withTerm != null)
        msgs = ((InternalEObject)withTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.EXISTS_TERM__WITH_TERM, null, msgs);
      if (newWithTerm != null)
        msgs = ((InternalEObject)newWithTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.EXISTS_TERM__WITH_TERM, null, msgs);
      msgs = basicSetWithTerm(newWithTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.EXISTS_TERM__WITH_TERM, newWithTerm, newWithTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.EXISTS_TERM__IN_TERM:
        return ((InternalEList<?>)getInTerm()).basicRemove(otherEnd, msgs);
      case TermDslPackage.EXISTS_TERM__WITH_TERM:
        return basicSetWithTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.EXISTS_TERM__UNIQUE:
        return getUnique();
      case TermDslPackage.EXISTS_TERM__VAR_TERM:
        return getVarTerm();
      case TermDslPackage.EXISTS_TERM__IN_TERM:
        return getInTerm();
      case TermDslPackage.EXISTS_TERM__WITH_TERM:
        return getWithTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.EXISTS_TERM__UNIQUE:
        setUnique((String)newValue);
        return;
      case TermDslPackage.EXISTS_TERM__VAR_TERM:
        getVarTerm().clear();
        getVarTerm().addAll((Collection<? extends String>)newValue);
        return;
      case TermDslPackage.EXISTS_TERM__IN_TERM:
        getInTerm().clear();
        getInTerm().addAll((Collection<? extends Expression>)newValue);
        return;
      case TermDslPackage.EXISTS_TERM__WITH_TERM:
        setWithTerm((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.EXISTS_TERM__UNIQUE:
        setUnique(UNIQUE_EDEFAULT);
        return;
      case TermDslPackage.EXISTS_TERM__VAR_TERM:
        getVarTerm().clear();
        return;
      case TermDslPackage.EXISTS_TERM__IN_TERM:
        getInTerm().clear();
        return;
      case TermDslPackage.EXISTS_TERM__WITH_TERM:
        setWithTerm((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.EXISTS_TERM__UNIQUE:
        return UNIQUE_EDEFAULT == null ? unique != null : !UNIQUE_EDEFAULT.equals(unique);
      case TermDslPackage.EXISTS_TERM__VAR_TERM:
        return varTerm != null && !varTerm.isEmpty();
      case TermDslPackage.EXISTS_TERM__IN_TERM:
        return inTerm != null && !inTerm.isEmpty();
      case TermDslPackage.EXISTS_TERM__WITH_TERM:
        return withTerm != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (unique: ");
    result.append(unique);
    result.append(", varTerm: ");
    result.append(varTerm);
    result.append(')');
    return result.toString();
  }

} //ExistsTermImpl
