/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.uasm.term.lang.termDsl.EnumerableTerm;
import org.uasm.term.lang.termDsl.Expression;
import org.uasm.term.lang.termDsl.MapComprehensionTerm;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Map Comprehension Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.MapComprehensionTermImpl#getTerm1 <em>Term1</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.MapComprehensionTermImpl#getTerm2 <em>Term2</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.MapComprehensionTermImpl#getVarTerm <em>Var Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.MapComprehensionTermImpl#getEnumTerm <em>Enum Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.MapComprehensionTermImpl#getTermWith <em>Term With</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MapComprehensionTermImpl extends ComprehensionTermImpl implements MapComprehensionTerm
{
  /**
   * The cached value of the '{@link #getTerm1() <em>Term1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm1()
   * @generated
   * @ordered
   */
  protected Expression term1;

  /**
   * The cached value of the '{@link #getTerm2() <em>Term2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm2()
   * @generated
   * @ordered
   */
  protected Expression term2;

  /**
   * The cached value of the '{@link #getVarTerm() <em>Var Term</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarTerm()
   * @generated
   * @ordered
   */
  protected EList<String> varTerm;

  /**
   * The cached value of the '{@link #getEnumTerm() <em>Enum Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnumTerm()
   * @generated
   * @ordered
   */
  protected EList<EnumerableTerm> enumTerm;

  /**
   * The cached value of the '{@link #getTermWith() <em>Term With</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTermWith()
   * @generated
   * @ordered
   */
  protected Expression termWith;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapComprehensionTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.MAP_COMPREHENSION_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getTerm1()
  {
    return term1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerm1(Expression newTerm1, NotificationChain msgs)
  {
    Expression oldTerm1 = term1;
    term1 = newTerm1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM1, oldTerm1, newTerm1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerm1(Expression newTerm1)
  {
    if (newTerm1 != term1)
    {
      NotificationChain msgs = null;
      if (term1 != null)
        msgs = ((InternalEObject)term1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM1, null, msgs);
      if (newTerm1 != null)
        msgs = ((InternalEObject)newTerm1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM1, null, msgs);
      msgs = basicSetTerm1(newTerm1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM1, newTerm1, newTerm1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getTerm2()
  {
    return term2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerm2(Expression newTerm2, NotificationChain msgs)
  {
    Expression oldTerm2 = term2;
    term2 = newTerm2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM2, oldTerm2, newTerm2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerm2(Expression newTerm2)
  {
    if (newTerm2 != term2)
    {
      NotificationChain msgs = null;
      if (term2 != null)
        msgs = ((InternalEObject)term2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM2, null, msgs);
      if (newTerm2 != null)
        msgs = ((InternalEObject)newTerm2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM2, null, msgs);
      msgs = basicSetTerm2(newTerm2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM2, newTerm2, newTerm2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getVarTerm()
  {
    if (varTerm == null)
    {
      varTerm = new EDataTypeEList<String>(String.class, this, TermDslPackage.MAP_COMPREHENSION_TERM__VAR_TERM);
    }
    return varTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EnumerableTerm> getEnumTerm()
  {
    if (enumTerm == null)
    {
      enumTerm = new EObjectContainmentEList<EnumerableTerm>(EnumerableTerm.class, this, TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM);
    }
    return enumTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getTermWith()
  {
    return termWith;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTermWith(Expression newTermWith, NotificationChain msgs)
  {
    Expression oldTermWith = termWith;
    termWith = newTermWith;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH, oldTermWith, newTermWith);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTermWith(Expression newTermWith)
  {
    if (newTermWith != termWith)
    {
      NotificationChain msgs = null;
      if (termWith != null)
        msgs = ((InternalEObject)termWith).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH, null, msgs);
      if (newTermWith != null)
        msgs = ((InternalEObject)newTermWith).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH, null, msgs);
      msgs = basicSetTermWith(newTermWith, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH, newTermWith, newTermWith));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM1:
        return basicSetTerm1(null, msgs);
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM2:
        return basicSetTerm2(null, msgs);
      case TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM:
        return ((InternalEList<?>)getEnumTerm()).basicRemove(otherEnd, msgs);
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH:
        return basicSetTermWith(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM1:
        return getTerm1();
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM2:
        return getTerm2();
      case TermDslPackage.MAP_COMPREHENSION_TERM__VAR_TERM:
        return getVarTerm();
      case TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM:
        return getEnumTerm();
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH:
        return getTermWith();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM1:
        setTerm1((Expression)newValue);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM2:
        setTerm2((Expression)newValue);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__VAR_TERM:
        getVarTerm().clear();
        getVarTerm().addAll((Collection<? extends String>)newValue);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM:
        getEnumTerm().clear();
        getEnumTerm().addAll((Collection<? extends EnumerableTerm>)newValue);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH:
        setTermWith((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM1:
        setTerm1((Expression)null);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM2:
        setTerm2((Expression)null);
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__VAR_TERM:
        getVarTerm().clear();
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM:
        getEnumTerm().clear();
        return;
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH:
        setTermWith((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM1:
        return term1 != null;
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM2:
        return term2 != null;
      case TermDslPackage.MAP_COMPREHENSION_TERM__VAR_TERM:
        return varTerm != null && !varTerm.isEmpty();
      case TermDslPackage.MAP_COMPREHENSION_TERM__ENUM_TERM:
        return enumTerm != null && !enumTerm.isEmpty();
      case TermDslPackage.MAP_COMPREHENSION_TERM__TERM_WITH:
        return termWith != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (varTerm: ");
    result.append(varTerm);
    result.append(')');
    return result.toString();
  }

} //MapComprehensionTermImpl
