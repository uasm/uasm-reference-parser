/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.uasm.term.lang.termDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.uasm.term.lang.termDsl.TermDslPackage
 * @generated
 */
public class TermDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TermDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TermDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TermDslSwitch<Adapter> modelSwitch =
    new TermDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseBasicTerm(BasicTerm object)
      {
        return createBasicTermAdapter();
      }
      @Override
      public Adapter caseTupleTerm(TupleTerm object)
      {
        return createTupleTermAdapter();
      }
      @Override
      public Adapter caseFunctionTerm(FunctionTerm object)
      {
        return createFunctionTermAdapter();
      }
      @Override
      public Adapter caseEnumerableTerm(EnumerableTerm object)
      {
        return createEnumerableTermAdapter();
      }
      @Override
      public Adapter caseLocationTerm(LocationTerm object)
      {
        return createLocationTermAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseBooleanLiteral(BooleanLiteral object)
      {
        return createBooleanLiteralAdapter();
      }
      @Override
      public Adapter caseKernelLiteral(KernelLiteral object)
      {
        return createKernelLiteralAdapter();
      }
      @Override
      public Adapter caseIntervalLiteral(IntervalLiteral object)
      {
        return createIntervalLiteralAdapter();
      }
      @Override
      public Adapter caseSetLiteral(SetLiteral object)
      {
        return createSetLiteralAdapter();
      }
      @Override
      public Adapter caseListLiteral(ListLiteral object)
      {
        return createListLiteralAdapter();
      }
      @Override
      public Adapter caseBagLiteral(BagLiteral object)
      {
        return createBagLiteralAdapter();
      }
      @Override
      public Adapter caseMapLiteral(MapLiteral object)
      {
        return createMapLiteralAdapter();
      }
      @Override
      public Adapter caseForAllTerm(ForAllTerm object)
      {
        return createForAllTermAdapter();
      }
      @Override
      public Adapter caseExistsTerm(ExistsTerm object)
      {
        return createExistsTermAdapter();
      }
      @Override
      public Adapter caseSizeOfEnumerableTerm(SizeOfEnumerableTerm object)
      {
        return createSizeOfEnumerableTermAdapter();
      }
      @Override
      public Adapter casePickTerm(PickTerm object)
      {
        return createPickTermAdapter();
      }
      @Override
      public Adapter caseConditionalTerm(ConditionalTerm object)
      {
        return createConditionalTermAdapter();
      }
      @Override
      public Adapter caseCaseTerm(CaseTerm object)
      {
        return createCaseTermAdapter();
      }
      @Override
      public Adapter caseLetTerm(LetTerm object)
      {
        return createLetTermAdapter();
      }
      @Override
      public Adapter caseRuleAsTerm(RuleAsTerm object)
      {
        return createRuleAsTermAdapter();
      }
      @Override
      public Adapter caseReturnTerm(ReturnTerm object)
      {
        return createReturnTermAdapter();
      }
      @Override
      public Adapter caseComprehensionTerm(ComprehensionTerm object)
      {
        return createComprehensionTermAdapter();
      }
      @Override
      public Adapter caseSetComprehensionTerm(SetComprehensionTerm object)
      {
        return createSetComprehensionTermAdapter();
      }
      @Override
      public Adapter caseListComprehensionTerm(ListComprehensionTerm object)
      {
        return createListComprehensionTermAdapter();
      }
      @Override
      public Adapter caseBagComprehensionTerm(BagComprehensionTerm object)
      {
        return createBagComprehensionTermAdapter();
      }
      @Override
      public Adapter caseMapComprehensionTerm(MapComprehensionTerm object)
      {
        return createMapComprehensionTermAdapter();
      }
      @Override
      public Adapter caseNumberRangeTerm(NumberRangeTerm object)
      {
        return createNumberRangeTermAdapter();
      }
      @Override
      public Adapter caseStructureTerm(StructureTerm object)
      {
        return createStructureTermAdapter();
      }
      @Override
      public Adapter caseSetTerm(SetTerm object)
      {
        return createSetTermAdapter();
      }
      @Override
      public Adapter caseListTerm(ListTerm object)
      {
        return createListTermAdapter();
      }
      @Override
      public Adapter caseBagTerm(BagTerm object)
      {
        return createBagTermAdapter();
      }
      @Override
      public Adapter caseMapTerm(MapTerm object)
      {
        return createMapTermAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseCharLiteral(CharLiteral object)
      {
        return createCharLiteralAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseStructuredDomain(StructuredDomain object)
      {
        return createStructuredDomainAdapter();
      }
      @Override
      public Adapter caseExtendableDomain(ExtendableDomain object)
      {
        return createExtendableDomainAdapter();
      }
      @Override
      public Adapter caseBasicDomain(BasicDomain object)
      {
        return createBasicDomainAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseTupleLiteral(TupleLiteral object)
      {
        return createTupleLiteralAdapter();
      }
      @Override
      public Adapter caseCondTernaryExpression(CondTernaryExpression object)
      {
        return createCondTernaryExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryExpression(BinaryExpression object)
      {
        return createBinaryExpressionAdapter();
      }
      @Override
      public Adapter caseBooleanNegation(BooleanNegation object)
      {
        return createBooleanNegationAdapter();
      }
      @Override
      public Adapter caseArithmeticSigned(ArithmeticSigned object)
      {
        return createArithmeticSignedAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BasicTerm <em>Basic Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BasicTerm
   * @generated
   */
  public Adapter createBasicTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.TupleTerm <em>Tuple Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.TupleTerm
   * @generated
   */
  public Adapter createTupleTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.FunctionTerm <em>Function Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.FunctionTerm
   * @generated
   */
  public Adapter createFunctionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.EnumerableTerm <em>Enumerable Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.EnumerableTerm
   * @generated
   */
  public Adapter createEnumerableTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.LocationTerm <em>Location Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.LocationTerm
   * @generated
   */
  public Adapter createLocationTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BooleanLiteral <em>Boolean Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BooleanLiteral
   * @generated
   */
  public Adapter createBooleanLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.KernelLiteral <em>Kernel Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.KernelLiteral
   * @generated
   */
  public Adapter createKernelLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.IntervalLiteral <em>Interval Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.IntervalLiteral
   * @generated
   */
  public Adapter createIntervalLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.SetLiteral <em>Set Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.SetLiteral
   * @generated
   */
  public Adapter createSetLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ListLiteral <em>List Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ListLiteral
   * @generated
   */
  public Adapter createListLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BagLiteral <em>Bag Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BagLiteral
   * @generated
   */
  public Adapter createBagLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.MapLiteral <em>Map Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.MapLiteral
   * @generated
   */
  public Adapter createMapLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ForAllTerm <em>For All Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ForAllTerm
   * @generated
   */
  public Adapter createForAllTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ExistsTerm <em>Exists Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ExistsTerm
   * @generated
   */
  public Adapter createExistsTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.SizeOfEnumerableTerm <em>Size Of Enumerable Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.SizeOfEnumerableTerm
   * @generated
   */
  public Adapter createSizeOfEnumerableTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.PickTerm <em>Pick Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.PickTerm
   * @generated
   */
  public Adapter createPickTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ConditionalTerm <em>Conditional Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ConditionalTerm
   * @generated
   */
  public Adapter createConditionalTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.CaseTerm <em>Case Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.CaseTerm
   * @generated
   */
  public Adapter createCaseTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.LetTerm <em>Let Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.LetTerm
   * @generated
   */
  public Adapter createLetTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.RuleAsTerm <em>Rule As Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.RuleAsTerm
   * @generated
   */
  public Adapter createRuleAsTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ReturnTerm <em>Return Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ReturnTerm
   * @generated
   */
  public Adapter createReturnTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ComprehensionTerm <em>Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ComprehensionTerm
   * @generated
   */
  public Adapter createComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.SetComprehensionTerm <em>Set Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.SetComprehensionTerm
   * @generated
   */
  public Adapter createSetComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ListComprehensionTerm <em>List Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ListComprehensionTerm
   * @generated
   */
  public Adapter createListComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BagComprehensionTerm <em>Bag Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BagComprehensionTerm
   * @generated
   */
  public Adapter createBagComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.MapComprehensionTerm <em>Map Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.MapComprehensionTerm
   * @generated
   */
  public Adapter createMapComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.NumberRangeTerm <em>Number Range Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.NumberRangeTerm
   * @generated
   */
  public Adapter createNumberRangeTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.StructureTerm <em>Structure Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.StructureTerm
   * @generated
   */
  public Adapter createStructureTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.SetTerm <em>Set Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.SetTerm
   * @generated
   */
  public Adapter createSetTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ListTerm <em>List Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ListTerm
   * @generated
   */
  public Adapter createListTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BagTerm <em>Bag Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BagTerm
   * @generated
   */
  public Adapter createBagTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.MapTerm <em>Map Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.MapTerm
   * @generated
   */
  public Adapter createMapTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.CharLiteral <em>Char Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.CharLiteral
   * @generated
   */
  public Adapter createCharLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.StructuredDomain <em>Structured Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.StructuredDomain
   * @generated
   */
  public Adapter createStructuredDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ExtendableDomain <em>Extendable Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ExtendableDomain
   * @generated
   */
  public Adapter createExtendableDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BasicDomain <em>Basic Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BasicDomain
   * @generated
   */
  public Adapter createBasicDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.TupleLiteral <em>Tuple Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.TupleLiteral
   * @generated
   */
  public Adapter createTupleLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.CondTernaryExpression <em>Cond Ternary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.CondTernaryExpression
   * @generated
   */
  public Adapter createCondTernaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BinaryExpression <em>Binary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BinaryExpression
   * @generated
   */
  public Adapter createBinaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.BooleanNegation <em>Boolean Negation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.BooleanNegation
   * @generated
   */
  public Adapter createBooleanNegationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uasm.term.lang.termDsl.ArithmeticSigned <em>Arithmetic Signed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uasm.term.lang.termDsl.ArithmeticSigned
   * @generated
   */
  public Adapter createArithmeticSignedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TermDslAdapterFactory
