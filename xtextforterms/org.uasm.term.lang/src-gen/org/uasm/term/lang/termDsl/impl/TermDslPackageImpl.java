/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.uasm.term.lang.termDsl.ArithmeticSigned;
import org.uasm.term.lang.termDsl.BagComprehensionTerm;
import org.uasm.term.lang.termDsl.BagLiteral;
import org.uasm.term.lang.termDsl.BagTerm;
import org.uasm.term.lang.termDsl.BasicDomain;
import org.uasm.term.lang.termDsl.BasicDomainEnum;
import org.uasm.term.lang.termDsl.BasicTerm;
import org.uasm.term.lang.termDsl.BinaryExpression;
import org.uasm.term.lang.termDsl.BooleanLiteral;
import org.uasm.term.lang.termDsl.BooleanNegation;
import org.uasm.term.lang.termDsl.CaseTerm;
import org.uasm.term.lang.termDsl.CharLiteral;
import org.uasm.term.lang.termDsl.ComprehensionTerm;
import org.uasm.term.lang.termDsl.CondTernaryExpression;
import org.uasm.term.lang.termDsl.ConditionalTerm;
import org.uasm.term.lang.termDsl.Domain;
import org.uasm.term.lang.termDsl.EnumerableTerm;
import org.uasm.term.lang.termDsl.ExistsTerm;
import org.uasm.term.lang.termDsl.Expression;
import org.uasm.term.lang.termDsl.ExtendableDomain;
import org.uasm.term.lang.termDsl.ForAllTerm;
import org.uasm.term.lang.termDsl.FunctionTerm;
import org.uasm.term.lang.termDsl.IntervalLiteral;
import org.uasm.term.lang.termDsl.KernelLiteral;
import org.uasm.term.lang.termDsl.LetTerm;
import org.uasm.term.lang.termDsl.ListComprehensionTerm;
import org.uasm.term.lang.termDsl.ListLiteral;
import org.uasm.term.lang.termDsl.ListTerm;
import org.uasm.term.lang.termDsl.Literal;
import org.uasm.term.lang.termDsl.LocationTerm;
import org.uasm.term.lang.termDsl.MapComprehensionTerm;
import org.uasm.term.lang.termDsl.MapLiteral;
import org.uasm.term.lang.termDsl.MapTerm;
import org.uasm.term.lang.termDsl.NumberLiteral;
import org.uasm.term.lang.termDsl.NumberRangeTerm;
import org.uasm.term.lang.termDsl.PickTerm;
import org.uasm.term.lang.termDsl.ReturnTerm;
import org.uasm.term.lang.termDsl.RuleAsTerm;
import org.uasm.term.lang.termDsl.SetComprehensionTerm;
import org.uasm.term.lang.termDsl.SetLiteral;
import org.uasm.term.lang.termDsl.SetTerm;
import org.uasm.term.lang.termDsl.SizeOfEnumerableTerm;
import org.uasm.term.lang.termDsl.StringLiteral;
import org.uasm.term.lang.termDsl.StructureTerm;
import org.uasm.term.lang.termDsl.StructuredDomain;
import org.uasm.term.lang.termDsl.TermDslFactory;
import org.uasm.term.lang.termDsl.TermDslPackage;
import org.uasm.term.lang.termDsl.TupleLiteral;
import org.uasm.term.lang.termDsl.TupleTerm;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TermDslPackageImpl extends EPackageImpl implements TermDslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumerableTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass locationTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass literalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass kernelLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intervalLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forAllTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass existsTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sizeOfEnumerableTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pickTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleAsTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass comprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setComprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listComprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagComprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapComprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberRangeTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass structureTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass charLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass domainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass structuredDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass extendableDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condTernaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanNegationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticSignedEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum basicDomainEnumEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.uasm.term.lang.termDsl.TermDslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private TermDslPackageImpl()
  {
    super(eNS_URI, TermDslFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link TermDslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static TermDslPackage init()
  {
    if (isInited) return (TermDslPackage)EPackage.Registry.INSTANCE.getEPackage(TermDslPackage.eNS_URI);

    // Obtain or create and register package
    TermDslPackageImpl theTermDslPackage = (TermDslPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof TermDslPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new TermDslPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theTermDslPackage.createPackageContents();

    // Initialize created meta-data
    theTermDslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theTermDslPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(TermDslPackage.eNS_URI, theTermDslPackage);
    return theTermDslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBasicTerm()
  {
    return basicTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTupleTerm()
  {
    return tupleTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleTerm_Term()
  {
    return (EReference)tupleTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionTerm()
  {
    return functionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionTerm_Function()
  {
    return (EAttribute)functionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionTerm_Args()
  {
    return (EReference)functionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionTerm_ArgsTuple()
  {
    return (EReference)functionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEnumerableTerm()
  {
    return enumerableTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEnumerableTerm_Dom()
  {
    return (EReference)enumerableTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLocationTerm()
  {
    return locationTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLocationTerm_Function()
  {
    return (EReference)locationTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLocationTerm_Result()
  {
    return (EAttribute)locationTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLiteral()
  {
    return literalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanLiteral()
  {
    return booleanLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBooleanLiteral_Val()
  {
    return (EAttribute)booleanLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getKernelLiteral()
  {
    return kernelLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getKernelLiteral_Val()
  {
    return (EAttribute)kernelLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIntervalLiteral()
  {
    return intervalLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIntervalLiteral_Start()
  {
    return (EReference)intervalLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIntervalLiteral_End()
  {
    return (EReference)intervalLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIntervalLiteral_Step()
  {
    return (EReference)intervalLiteralEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetLiteral()
  {
    return setLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetLiteral_Literal()
  {
    return (EReference)setLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getListLiteral()
  {
    return listLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListLiteral_Literal()
  {
    return (EReference)listLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBagLiteral()
  {
    return bagLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBagLiteral_Literal()
  {
    return (EReference)bagLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapLiteral()
  {
    return mapLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapLiteral_Literal()
  {
    return (EReference)mapLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForAllTerm()
  {
    return forAllTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getForAllTerm_VarTerm()
  {
    return (EAttribute)forAllTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForAllTerm_InTerm()
  {
    return (EReference)forAllTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForAllTerm_WithTerm()
  {
    return (EReference)forAllTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExistsTerm()
  {
    return existsTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExistsTerm_Unique()
  {
    return (EAttribute)existsTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExistsTerm_VarTerm()
  {
    return (EAttribute)existsTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExistsTerm_InTerm()
  {
    return (EReference)existsTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExistsTerm_WithTerm()
  {
    return (EReference)existsTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSizeOfEnumerableTerm()
  {
    return sizeOfEnumerableTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSizeOfEnumerableTerm_EnumTerm()
  {
    return (EReference)sizeOfEnumerableTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPickTerm()
  {
    return pickTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPickTerm_VarTerm()
  {
    return (EAttribute)pickTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPickTerm_EnumTerm()
  {
    return (EReference)pickTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPickTerm_Term()
  {
    return (EReference)pickTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConditionalTerm()
  {
    return conditionalTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalTerm_Cond()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalTerm_ThenTerm()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalTerm_ElseTerm()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCaseTerm()
  {
    return caseTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseTerm_CaseTerm()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseTerm_Term()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseTerm_TermAction()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseTerm_OtherwiseTerm()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLetTerm()
  {
    return letTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLetTerm_VarTerm()
  {
    return (EAttribute)letTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetTerm_Term()
  {
    return (EReference)letTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetTerm_Body()
  {
    return (EReference)letTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRuleAsTerm()
  {
    return ruleAsTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRuleAsTerm_Rule()
  {
    return (EAttribute)ruleAsTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturnTerm()
  {
    return returnTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnTerm_Term()
  {
    return (EReference)returnTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getComprehensionTerm()
  {
    return comprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetComprehensionTerm()
  {
    return setComprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetComprehensionTerm_Term()
  {
    return (EReference)setComprehensionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSetComprehensionTerm_VarTerm()
  {
    return (EAttribute)setComprehensionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetComprehensionTerm_EnumTerm()
  {
    return (EReference)setComprehensionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetComprehensionTerm_TermWith()
  {
    return (EReference)setComprehensionTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getListComprehensionTerm()
  {
    return listComprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListComprehensionTerm_Term()
  {
    return (EReference)listComprehensionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getListComprehensionTerm_VarTerm()
  {
    return (EAttribute)listComprehensionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListComprehensionTerm_EnumTerm()
  {
    return (EReference)listComprehensionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListComprehensionTerm_TermWith()
  {
    return (EReference)listComprehensionTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBagComprehensionTerm()
  {
    return bagComprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBagComprehensionTerm_Term()
  {
    return (EReference)bagComprehensionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBagComprehensionTerm_VarTerm()
  {
    return (EAttribute)bagComprehensionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBagComprehensionTerm_EnumTerm()
  {
    return (EReference)bagComprehensionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBagComprehensionTerm_TermWith()
  {
    return (EReference)bagComprehensionTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapComprehensionTerm()
  {
    return mapComprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapComprehensionTerm_Term1()
  {
    return (EReference)mapComprehensionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapComprehensionTerm_Term2()
  {
    return (EReference)mapComprehensionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMapComprehensionTerm_VarTerm()
  {
    return (EAttribute)mapComprehensionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapComprehensionTerm_EnumTerm()
  {
    return (EReference)mapComprehensionTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapComprehensionTerm_TermWith()
  {
    return (EReference)mapComprehensionTermEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNumberRangeTerm()
  {
    return numberRangeTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNumberRangeTerm_Start()
  {
    return (EReference)numberRangeTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNumberRangeTerm_End()
  {
    return (EReference)numberRangeTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNumberRangeTerm_Step()
  {
    return (EReference)numberRangeTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStructureTerm()
  {
    return structureTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStructureTerm_Term()
  {
    return (EReference)structureTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetTerm()
  {
    return setTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getListTerm()
  {
    return listTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBagTerm()
  {
    return bagTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapTerm()
  {
    return mapTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStringLiteral()
  {
    return stringLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStringLiteral_Text()
  {
    return (EAttribute)stringLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCharLiteral()
  {
    return charLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCharLiteral_Text()
  {
    return (EAttribute)charLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDomain()
  {
    return domainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStructuredDomain()
  {
    return structuredDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStructuredDomain_Type()
  {
    return (EAttribute)structuredDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStructuredDomain_DomainSet()
  {
    return (EReference)structuredDomainEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStructuredDomain_DomainBag()
  {
    return (EReference)structuredDomainEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStructuredDomain_DomainList()
  {
    return (EReference)structuredDomainEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStructuredDomain_DomainMap()
  {
    return (EReference)structuredDomainEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExtendableDomain()
  {
    return extendableDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExtendableDomain_Type()
  {
    return (EAttribute)extendableDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBasicDomain()
  {
    return basicDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBasicDomain_TypeBasicDom()
  {
    return (EAttribute)basicDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNumberLiteral()
  {
    return numberLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNumberLiteral_Value()
  {
    return (EAttribute)numberLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNumberLiteral_ValueDec()
  {
    return (EAttribute)numberLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTupleLiteral()
  {
    return tupleLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleLiteral_Literals()
  {
    return (EReference)tupleLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondTernaryExpression()
  {
    return condTernaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondTernaryExpression_Cond()
  {
    return (EReference)condTernaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondTernaryExpression_Then()
  {
    return (EReference)condTernaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondTernaryExpression_Else()
  {
    return (EReference)condTernaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinaryExpression()
  {
    return binaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Left()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBinaryExpression_Op()
  {
    return (EAttribute)binaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Right()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanNegation()
  {
    return booleanNegationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBooleanNegation_Op()
  {
    return (EAttribute)booleanNegationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBooleanNegation_Expression()
  {
    return (EReference)booleanNegationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArithmeticSigned()
  {
    return arithmeticSignedEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArithmeticSigned_Op()
  {
    return (EAttribute)arithmeticSignedEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticSigned_Expression()
  {
    return (EReference)arithmeticSignedEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getBasicDomainEnum()
  {
    return basicDomainEnumEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDslFactory getTermDslFactory()
  {
    return (TermDslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    expressionEClass = createEClass(EXPRESSION);

    basicTermEClass = createEClass(BASIC_TERM);

    tupleTermEClass = createEClass(TUPLE_TERM);
    createEReference(tupleTermEClass, TUPLE_TERM__TERM);

    functionTermEClass = createEClass(FUNCTION_TERM);
    createEAttribute(functionTermEClass, FUNCTION_TERM__FUNCTION);
    createEReference(functionTermEClass, FUNCTION_TERM__ARGS);
    createEReference(functionTermEClass, FUNCTION_TERM__ARGS_TUPLE);

    enumerableTermEClass = createEClass(ENUMERABLE_TERM);
    createEReference(enumerableTermEClass, ENUMERABLE_TERM__DOM);

    locationTermEClass = createEClass(LOCATION_TERM);
    createEReference(locationTermEClass, LOCATION_TERM__FUNCTION);
    createEAttribute(locationTermEClass, LOCATION_TERM__RESULT);

    literalEClass = createEClass(LITERAL);

    booleanLiteralEClass = createEClass(BOOLEAN_LITERAL);
    createEAttribute(booleanLiteralEClass, BOOLEAN_LITERAL__VAL);

    kernelLiteralEClass = createEClass(KERNEL_LITERAL);
    createEAttribute(kernelLiteralEClass, KERNEL_LITERAL__VAL);

    intervalLiteralEClass = createEClass(INTERVAL_LITERAL);
    createEReference(intervalLiteralEClass, INTERVAL_LITERAL__START);
    createEReference(intervalLiteralEClass, INTERVAL_LITERAL__END);
    createEReference(intervalLiteralEClass, INTERVAL_LITERAL__STEP);

    setLiteralEClass = createEClass(SET_LITERAL);
    createEReference(setLiteralEClass, SET_LITERAL__LITERAL);

    listLiteralEClass = createEClass(LIST_LITERAL);
    createEReference(listLiteralEClass, LIST_LITERAL__LITERAL);

    bagLiteralEClass = createEClass(BAG_LITERAL);
    createEReference(bagLiteralEClass, BAG_LITERAL__LITERAL);

    mapLiteralEClass = createEClass(MAP_LITERAL);
    createEReference(mapLiteralEClass, MAP_LITERAL__LITERAL);

    forAllTermEClass = createEClass(FOR_ALL_TERM);
    createEAttribute(forAllTermEClass, FOR_ALL_TERM__VAR_TERM);
    createEReference(forAllTermEClass, FOR_ALL_TERM__IN_TERM);
    createEReference(forAllTermEClass, FOR_ALL_TERM__WITH_TERM);

    existsTermEClass = createEClass(EXISTS_TERM);
    createEAttribute(existsTermEClass, EXISTS_TERM__UNIQUE);
    createEAttribute(existsTermEClass, EXISTS_TERM__VAR_TERM);
    createEReference(existsTermEClass, EXISTS_TERM__IN_TERM);
    createEReference(existsTermEClass, EXISTS_TERM__WITH_TERM);

    sizeOfEnumerableTermEClass = createEClass(SIZE_OF_ENUMERABLE_TERM);
    createEReference(sizeOfEnumerableTermEClass, SIZE_OF_ENUMERABLE_TERM__ENUM_TERM);

    pickTermEClass = createEClass(PICK_TERM);
    createEAttribute(pickTermEClass, PICK_TERM__VAR_TERM);
    createEReference(pickTermEClass, PICK_TERM__ENUM_TERM);
    createEReference(pickTermEClass, PICK_TERM__TERM);

    conditionalTermEClass = createEClass(CONDITIONAL_TERM);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__COND);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__THEN_TERM);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__ELSE_TERM);

    caseTermEClass = createEClass(CASE_TERM);
    createEReference(caseTermEClass, CASE_TERM__CASE_TERM);
    createEReference(caseTermEClass, CASE_TERM__TERM);
    createEReference(caseTermEClass, CASE_TERM__TERM_ACTION);
    createEReference(caseTermEClass, CASE_TERM__OTHERWISE_TERM);

    letTermEClass = createEClass(LET_TERM);
    createEAttribute(letTermEClass, LET_TERM__VAR_TERM);
    createEReference(letTermEClass, LET_TERM__TERM);
    createEReference(letTermEClass, LET_TERM__BODY);

    ruleAsTermEClass = createEClass(RULE_AS_TERM);
    createEAttribute(ruleAsTermEClass, RULE_AS_TERM__RULE);

    returnTermEClass = createEClass(RETURN_TERM);
    createEReference(returnTermEClass, RETURN_TERM__TERM);

    comprehensionTermEClass = createEClass(COMPREHENSION_TERM);

    setComprehensionTermEClass = createEClass(SET_COMPREHENSION_TERM);
    createEReference(setComprehensionTermEClass, SET_COMPREHENSION_TERM__TERM);
    createEAttribute(setComprehensionTermEClass, SET_COMPREHENSION_TERM__VAR_TERM);
    createEReference(setComprehensionTermEClass, SET_COMPREHENSION_TERM__ENUM_TERM);
    createEReference(setComprehensionTermEClass, SET_COMPREHENSION_TERM__TERM_WITH);

    listComprehensionTermEClass = createEClass(LIST_COMPREHENSION_TERM);
    createEReference(listComprehensionTermEClass, LIST_COMPREHENSION_TERM__TERM);
    createEAttribute(listComprehensionTermEClass, LIST_COMPREHENSION_TERM__VAR_TERM);
    createEReference(listComprehensionTermEClass, LIST_COMPREHENSION_TERM__ENUM_TERM);
    createEReference(listComprehensionTermEClass, LIST_COMPREHENSION_TERM__TERM_WITH);

    bagComprehensionTermEClass = createEClass(BAG_COMPREHENSION_TERM);
    createEReference(bagComprehensionTermEClass, BAG_COMPREHENSION_TERM__TERM);
    createEAttribute(bagComprehensionTermEClass, BAG_COMPREHENSION_TERM__VAR_TERM);
    createEReference(bagComprehensionTermEClass, BAG_COMPREHENSION_TERM__ENUM_TERM);
    createEReference(bagComprehensionTermEClass, BAG_COMPREHENSION_TERM__TERM_WITH);

    mapComprehensionTermEClass = createEClass(MAP_COMPREHENSION_TERM);
    createEReference(mapComprehensionTermEClass, MAP_COMPREHENSION_TERM__TERM1);
    createEReference(mapComprehensionTermEClass, MAP_COMPREHENSION_TERM__TERM2);
    createEAttribute(mapComprehensionTermEClass, MAP_COMPREHENSION_TERM__VAR_TERM);
    createEReference(mapComprehensionTermEClass, MAP_COMPREHENSION_TERM__ENUM_TERM);
    createEReference(mapComprehensionTermEClass, MAP_COMPREHENSION_TERM__TERM_WITH);

    numberRangeTermEClass = createEClass(NUMBER_RANGE_TERM);
    createEReference(numberRangeTermEClass, NUMBER_RANGE_TERM__START);
    createEReference(numberRangeTermEClass, NUMBER_RANGE_TERM__END);
    createEReference(numberRangeTermEClass, NUMBER_RANGE_TERM__STEP);

    structureTermEClass = createEClass(STRUCTURE_TERM);
    createEReference(structureTermEClass, STRUCTURE_TERM__TERM);

    setTermEClass = createEClass(SET_TERM);

    listTermEClass = createEClass(LIST_TERM);

    bagTermEClass = createEClass(BAG_TERM);

    mapTermEClass = createEClass(MAP_TERM);

    stringLiteralEClass = createEClass(STRING_LITERAL);
    createEAttribute(stringLiteralEClass, STRING_LITERAL__TEXT);

    charLiteralEClass = createEClass(CHAR_LITERAL);
    createEAttribute(charLiteralEClass, CHAR_LITERAL__TEXT);

    domainEClass = createEClass(DOMAIN);

    structuredDomainEClass = createEClass(STRUCTURED_DOMAIN);
    createEAttribute(structuredDomainEClass, STRUCTURED_DOMAIN__TYPE);
    createEReference(structuredDomainEClass, STRUCTURED_DOMAIN__DOMAIN_SET);
    createEReference(structuredDomainEClass, STRUCTURED_DOMAIN__DOMAIN_BAG);
    createEReference(structuredDomainEClass, STRUCTURED_DOMAIN__DOMAIN_LIST);
    createEReference(structuredDomainEClass, STRUCTURED_DOMAIN__DOMAIN_MAP);

    extendableDomainEClass = createEClass(EXTENDABLE_DOMAIN);
    createEAttribute(extendableDomainEClass, EXTENDABLE_DOMAIN__TYPE);

    basicDomainEClass = createEClass(BASIC_DOMAIN);
    createEAttribute(basicDomainEClass, BASIC_DOMAIN__TYPE_BASIC_DOM);

    numberLiteralEClass = createEClass(NUMBER_LITERAL);
    createEAttribute(numberLiteralEClass, NUMBER_LITERAL__VALUE);
    createEAttribute(numberLiteralEClass, NUMBER_LITERAL__VALUE_DEC);

    tupleLiteralEClass = createEClass(TUPLE_LITERAL);
    createEReference(tupleLiteralEClass, TUPLE_LITERAL__LITERALS);

    condTernaryExpressionEClass = createEClass(COND_TERNARY_EXPRESSION);
    createEReference(condTernaryExpressionEClass, COND_TERNARY_EXPRESSION__COND);
    createEReference(condTernaryExpressionEClass, COND_TERNARY_EXPRESSION__THEN);
    createEReference(condTernaryExpressionEClass, COND_TERNARY_EXPRESSION__ELSE);

    binaryExpressionEClass = createEClass(BINARY_EXPRESSION);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__LEFT);
    createEAttribute(binaryExpressionEClass, BINARY_EXPRESSION__OP);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__RIGHT);

    booleanNegationEClass = createEClass(BOOLEAN_NEGATION);
    createEAttribute(booleanNegationEClass, BOOLEAN_NEGATION__OP);
    createEReference(booleanNegationEClass, BOOLEAN_NEGATION__EXPRESSION);

    arithmeticSignedEClass = createEClass(ARITHMETIC_SIGNED);
    createEAttribute(arithmeticSignedEClass, ARITHMETIC_SIGNED__OP);
    createEReference(arithmeticSignedEClass, ARITHMETIC_SIGNED__EXPRESSION);

    // Create enums
    basicDomainEnumEEnum = createEEnum(BASIC_DOMAIN_ENUM);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    expressionEClass.getESuperTypes().add(this.getEnumerableTerm());
    basicTermEClass.getESuperTypes().add(this.getExpression());
    tupleTermEClass.getESuperTypes().add(this.getBasicTerm());
    locationTermEClass.getESuperTypes().add(this.getBasicTerm());
    literalEClass.getESuperTypes().add(this.getBasicTerm());
    booleanLiteralEClass.getESuperTypes().add(this.getLiteral());
    kernelLiteralEClass.getESuperTypes().add(this.getLiteral());
    intervalLiteralEClass.getESuperTypes().add(this.getLiteral());
    setLiteralEClass.getESuperTypes().add(this.getLiteral());
    listLiteralEClass.getESuperTypes().add(this.getLiteral());
    bagLiteralEClass.getESuperTypes().add(this.getLiteral());
    mapLiteralEClass.getESuperTypes().add(this.getLiteral());
    forAllTermEClass.getESuperTypes().add(this.getBasicTerm());
    existsTermEClass.getESuperTypes().add(this.getBasicTerm());
    sizeOfEnumerableTermEClass.getESuperTypes().add(this.getBasicTerm());
    pickTermEClass.getESuperTypes().add(this.getBasicTerm());
    conditionalTermEClass.getESuperTypes().add(this.getBasicTerm());
    caseTermEClass.getESuperTypes().add(this.getBasicTerm());
    letTermEClass.getESuperTypes().add(this.getBasicTerm());
    ruleAsTermEClass.getESuperTypes().add(this.getBasicTerm());
    returnTermEClass.getESuperTypes().add(this.getBasicTerm());
    comprehensionTermEClass.getESuperTypes().add(this.getBasicTerm());
    setComprehensionTermEClass.getESuperTypes().add(this.getComprehensionTerm());
    listComprehensionTermEClass.getESuperTypes().add(this.getComprehensionTerm());
    bagComprehensionTermEClass.getESuperTypes().add(this.getComprehensionTerm());
    mapComprehensionTermEClass.getESuperTypes().add(this.getComprehensionTerm());
    numberRangeTermEClass.getESuperTypes().add(this.getComprehensionTerm());
    structureTermEClass.getESuperTypes().add(this.getBasicTerm());
    setTermEClass.getESuperTypes().add(this.getStructureTerm());
    listTermEClass.getESuperTypes().add(this.getStructureTerm());
    bagTermEClass.getESuperTypes().add(this.getStructureTerm());
    mapTermEClass.getESuperTypes().add(this.getStructureTerm());
    stringLiteralEClass.getESuperTypes().add(this.getLiteral());
    charLiteralEClass.getESuperTypes().add(this.getLiteral());
    structuredDomainEClass.getESuperTypes().add(this.getDomain());
    extendableDomainEClass.getESuperTypes().add(this.getDomain());
    basicDomainEClass.getESuperTypes().add(this.getDomain());
    numberLiteralEClass.getESuperTypes().add(this.getLiteral());
    tupleLiteralEClass.getESuperTypes().add(this.getBasicTerm());
    condTernaryExpressionEClass.getESuperTypes().add(this.getExpression());
    binaryExpressionEClass.getESuperTypes().add(this.getExpression());
    booleanNegationEClass.getESuperTypes().add(this.getExpression());
    arithmeticSignedEClass.getESuperTypes().add(this.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(basicTermEClass, BasicTerm.class, "BasicTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(tupleTermEClass, TupleTerm.class, "TupleTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleTerm_Term(), this.getExpression(), null, "term", null, 0, -1, TupleTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionTermEClass, FunctionTerm.class, "FunctionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionTerm_Function(), ecorePackage.getEString(), "function", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionTerm_Args(), this.getExpression(), null, "args", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionTerm_ArgsTuple(), this.getTupleTerm(), null, "argsTuple", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumerableTermEClass, EnumerableTerm.class, "EnumerableTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnumerableTerm_Dom(), this.getDomain(), null, "dom", null, 0, 1, EnumerableTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(locationTermEClass, LocationTerm.class, "LocationTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLocationTerm_Function(), this.getFunctionTerm(), null, "function", null, 0, 1, LocationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLocationTerm_Result(), ecorePackage.getEString(), "result", null, 0, 1, LocationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(literalEClass, Literal.class, "Literal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(booleanLiteralEClass, BooleanLiteral.class, "BooleanLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBooleanLiteral_Val(), ecorePackage.getEString(), "val", null, 0, 1, BooleanLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(kernelLiteralEClass, KernelLiteral.class, "KernelLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getKernelLiteral_Val(), ecorePackage.getEString(), "val", null, 0, 1, KernelLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intervalLiteralEClass, IntervalLiteral.class, "IntervalLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIntervalLiteral_Start(), this.getLiteral(), null, "start", null, 0, 1, IntervalLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIntervalLiteral_End(), this.getLiteral(), null, "end", null, 0, 1, IntervalLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIntervalLiteral_Step(), this.getLiteral(), null, "step", null, 0, 1, IntervalLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setLiteralEClass, SetLiteral.class, "SetLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetLiteral_Literal(), this.getLiteral(), null, "literal", null, 0, -1, SetLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(listLiteralEClass, ListLiteral.class, "ListLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getListLiteral_Literal(), this.getLiteral(), null, "literal", null, 0, -1, ListLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bagLiteralEClass, BagLiteral.class, "BagLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBagLiteral_Literal(), this.getLiteral(), null, "literal", null, 0, -1, BagLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapLiteralEClass, MapLiteral.class, "MapLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapLiteral_Literal(), this.getLiteral(), null, "literal", null, 0, -1, MapLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forAllTermEClass, ForAllTerm.class, "ForAllTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getForAllTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, ForAllTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForAllTerm_InTerm(), this.getExpression(), null, "inTerm", null, 0, -1, ForAllTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForAllTerm_WithTerm(), this.getExpression(), null, "withTerm", null, 0, 1, ForAllTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(existsTermEClass, ExistsTerm.class, "ExistsTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExistsTerm_Unique(), ecorePackage.getEString(), "unique", null, 0, 1, ExistsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExistsTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, ExistsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExistsTerm_InTerm(), this.getExpression(), null, "inTerm", null, 0, -1, ExistsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExistsTerm_WithTerm(), this.getExpression(), null, "withTerm", null, 0, 1, ExistsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sizeOfEnumerableTermEClass, SizeOfEnumerableTerm.class, "SizeOfEnumerableTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSizeOfEnumerableTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, 1, SizeOfEnumerableTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pickTermEClass, PickTerm.class, "PickTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPickTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, 1, PickTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPickTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, 1, PickTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPickTerm_Term(), this.getExpression(), null, "term", null, 0, 1, PickTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalTermEClass, ConditionalTerm.class, "ConditionalTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalTerm_Cond(), this.getExpression(), null, "cond", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalTerm_ThenTerm(), this.getExpression(), null, "thenTerm", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalTerm_ElseTerm(), this.getExpression(), null, "elseTerm", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseTermEClass, CaseTerm.class, "CaseTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseTerm_CaseTerm(), this.getExpression(), null, "caseTerm", null, 0, 1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_Term(), this.getExpression(), null, "term", null, 0, -1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_TermAction(), this.getExpression(), null, "termAction", null, 0, -1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_OtherwiseTerm(), this.getExpression(), null, "otherwiseTerm", null, 0, 1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(letTermEClass, LetTerm.class, "LetTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLetTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, LetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetTerm_Term(), this.getExpression(), null, "term", null, 0, -1, LetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetTerm_Body(), this.getExpression(), null, "body", null, 0, 1, LetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ruleAsTermEClass, RuleAsTerm.class, "RuleAsTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRuleAsTerm_Rule(), ecorePackage.getEString(), "rule", null, 0, 1, RuleAsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnTermEClass, ReturnTerm.class, "ReturnTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getReturnTerm_Term(), this.getExpression(), null, "term", null, 0, 1, ReturnTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(comprehensionTermEClass, ComprehensionTerm.class, "ComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(setComprehensionTermEClass, SetComprehensionTerm.class, "SetComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetComprehensionTerm_Term(), this.getExpression(), null, "term", null, 0, 1, SetComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSetComprehensionTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, SetComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetComprehensionTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, -1, SetComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetComprehensionTerm_TermWith(), this.getExpression(), null, "termWith", null, 0, 1, SetComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(listComprehensionTermEClass, ListComprehensionTerm.class, "ListComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getListComprehensionTerm_Term(), this.getExpression(), null, "term", null, 0, 1, ListComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getListComprehensionTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, ListComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getListComprehensionTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, -1, ListComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getListComprehensionTerm_TermWith(), this.getExpression(), null, "termWith", null, 0, 1, ListComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bagComprehensionTermEClass, BagComprehensionTerm.class, "BagComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBagComprehensionTerm_Term(), this.getExpression(), null, "term", null, 0, 1, BagComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBagComprehensionTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, BagComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBagComprehensionTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, -1, BagComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBagComprehensionTerm_TermWith(), this.getExpression(), null, "termWith", null, 0, 1, BagComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapComprehensionTermEClass, MapComprehensionTerm.class, "MapComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapComprehensionTerm_Term1(), this.getExpression(), null, "term1", null, 0, 1, MapComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapComprehensionTerm_Term2(), this.getExpression(), null, "term2", null, 0, 1, MapComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMapComprehensionTerm_VarTerm(), ecorePackage.getEString(), "varTerm", null, 0, -1, MapComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapComprehensionTerm_EnumTerm(), this.getEnumerableTerm(), null, "enumTerm", null, 0, -1, MapComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapComprehensionTerm_TermWith(), this.getExpression(), null, "termWith", null, 0, 1, MapComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberRangeTermEClass, NumberRangeTerm.class, "NumberRangeTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNumberRangeTerm_Start(), this.getExpression(), null, "start", null, 0, 1, NumberRangeTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNumberRangeTerm_End(), this.getExpression(), null, "end", null, 0, 1, NumberRangeTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNumberRangeTerm_Step(), this.getExpression(), null, "step", null, 0, 1, NumberRangeTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(structureTermEClass, StructureTerm.class, "StructureTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStructureTerm_Term(), this.getExpression(), null, "term", null, 0, -1, StructureTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setTermEClass, SetTerm.class, "SetTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(listTermEClass, ListTerm.class, "ListTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bagTermEClass, BagTerm.class, "BagTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mapTermEClass, MapTerm.class, "MapTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stringLiteralEClass, StringLiteral.class, "StringLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringLiteral_Text(), ecorePackage.getEString(), "text", null, 0, 1, StringLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(charLiteralEClass, CharLiteral.class, "CharLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCharLiteral_Text(), ecorePackage.getEString(), "text", null, 0, 1, CharLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(domainEClass, Domain.class, "Domain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(structuredDomainEClass, StructuredDomain.class, "StructuredDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStructuredDomain_Type(), ecorePackage.getEString(), "type", null, 0, 1, StructuredDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStructuredDomain_DomainSet(), this.getDomain(), null, "domainSet", null, 0, 1, StructuredDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStructuredDomain_DomainBag(), this.getDomain(), null, "domainBag", null, 0, 1, StructuredDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStructuredDomain_DomainList(), this.getDomain(), null, "domainList", null, 0, 1, StructuredDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStructuredDomain_DomainMap(), this.getDomain(), null, "domainMap", null, 0, -1, StructuredDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(extendableDomainEClass, ExtendableDomain.class, "ExtendableDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExtendableDomain_Type(), ecorePackage.getEString(), "type", null, 0, 1, ExtendableDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicDomainEClass, BasicDomain.class, "BasicDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBasicDomain_TypeBasicDom(), this.getBasicDomainEnum(), "typeBasicDom", null, 0, 1, BasicDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberLiteralEClass, NumberLiteral.class, "NumberLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumberLiteral_Value(), ecorePackage.getEInt(), "value", null, 0, 1, NumberLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNumberLiteral_ValueDec(), ecorePackage.getEBigDecimal(), "valueDec", null, 0, 1, NumberLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tupleLiteralEClass, TupleLiteral.class, "TupleLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleLiteral_Literals(), this.getLiteral(), null, "literals", null, 0, -1, TupleLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condTernaryExpressionEClass, CondTernaryExpression.class, "CondTernaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondTernaryExpression_Cond(), this.getExpression(), null, "cond", null, 0, 1, CondTernaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondTernaryExpression_Then(), this.getExpression(), null, "then", null, 0, 1, CondTernaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondTernaryExpression_Else(), this.getExpression(), null, "else", null, 0, 1, CondTernaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(binaryExpressionEClass, BinaryExpression.class, "BinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBinaryExpression_Left(), this.getExpression(), null, "left", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBinaryExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinaryExpression_Right(), this.getExpression(), null, "right", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanNegationEClass, BooleanNegation.class, "BooleanNegation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBooleanNegation_Op(), ecorePackage.getEString(), "op", null, 0, 1, BooleanNegation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBooleanNegation_Expression(), this.getExpression(), null, "expression", null, 0, 1, BooleanNegation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticSignedEClass, ArithmeticSigned.class, "ArithmeticSigned", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArithmeticSigned_Op(), ecorePackage.getEString(), "op", null, 0, 1, ArithmeticSigned.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArithmeticSigned_Expression(), this.getExpression(), null, "expression", null, 0, 1, ArithmeticSigned.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(basicDomainEnumEEnum, BasicDomainEnum.class, "BasicDomainEnum");
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.STRING);
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.NUMBER);
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.INTEGER);
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.CHAR);
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.BOOLEAN);
    addEEnumLiteral(basicDomainEnumEEnum, BasicDomainEnum.RULE);

    // Create resource
    createResource(eNS_URI);
  }

} //TermDslPackageImpl
