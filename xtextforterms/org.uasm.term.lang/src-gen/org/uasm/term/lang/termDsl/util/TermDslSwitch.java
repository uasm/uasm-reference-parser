/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.uasm.term.lang.termDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.uasm.term.lang.termDsl.TermDslPackage
 * @generated
 */
public class TermDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TermDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = TermDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case TermDslPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseEnumerableTerm(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BASIC_TERM:
      {
        BasicTerm basicTerm = (BasicTerm)theEObject;
        T result = caseBasicTerm(basicTerm);
        if (result == null) result = caseExpression(basicTerm);
        if (result == null) result = caseEnumerableTerm(basicTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.TUPLE_TERM:
      {
        TupleTerm tupleTerm = (TupleTerm)theEObject;
        T result = caseTupleTerm(tupleTerm);
        if (result == null) result = caseBasicTerm(tupleTerm);
        if (result == null) result = caseExpression(tupleTerm);
        if (result == null) result = caseEnumerableTerm(tupleTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.FUNCTION_TERM:
      {
        FunctionTerm functionTerm = (FunctionTerm)theEObject;
        T result = caseFunctionTerm(functionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.ENUMERABLE_TERM:
      {
        EnumerableTerm enumerableTerm = (EnumerableTerm)theEObject;
        T result = caseEnumerableTerm(enumerableTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LOCATION_TERM:
      {
        LocationTerm locationTerm = (LocationTerm)theEObject;
        T result = caseLocationTerm(locationTerm);
        if (result == null) result = caseBasicTerm(locationTerm);
        if (result == null) result = caseExpression(locationTerm);
        if (result == null) result = caseEnumerableTerm(locationTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseBasicTerm(literal);
        if (result == null) result = caseExpression(literal);
        if (result == null) result = caseEnumerableTerm(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseLiteral(booleanLiteral);
        if (result == null) result = caseBasicTerm(booleanLiteral);
        if (result == null) result = caseExpression(booleanLiteral);
        if (result == null) result = caseEnumerableTerm(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.KERNEL_LITERAL:
      {
        KernelLiteral kernelLiteral = (KernelLiteral)theEObject;
        T result = caseKernelLiteral(kernelLiteral);
        if (result == null) result = caseLiteral(kernelLiteral);
        if (result == null) result = caseBasicTerm(kernelLiteral);
        if (result == null) result = caseExpression(kernelLiteral);
        if (result == null) result = caseEnumerableTerm(kernelLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.INTERVAL_LITERAL:
      {
        IntervalLiteral intervalLiteral = (IntervalLiteral)theEObject;
        T result = caseIntervalLiteral(intervalLiteral);
        if (result == null) result = caseLiteral(intervalLiteral);
        if (result == null) result = caseBasicTerm(intervalLiteral);
        if (result == null) result = caseExpression(intervalLiteral);
        if (result == null) result = caseEnumerableTerm(intervalLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.SET_LITERAL:
      {
        SetLiteral setLiteral = (SetLiteral)theEObject;
        T result = caseSetLiteral(setLiteral);
        if (result == null) result = caseLiteral(setLiteral);
        if (result == null) result = caseBasicTerm(setLiteral);
        if (result == null) result = caseExpression(setLiteral);
        if (result == null) result = caseEnumerableTerm(setLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LIST_LITERAL:
      {
        ListLiteral listLiteral = (ListLiteral)theEObject;
        T result = caseListLiteral(listLiteral);
        if (result == null) result = caseLiteral(listLiteral);
        if (result == null) result = caseBasicTerm(listLiteral);
        if (result == null) result = caseExpression(listLiteral);
        if (result == null) result = caseEnumerableTerm(listLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BAG_LITERAL:
      {
        BagLiteral bagLiteral = (BagLiteral)theEObject;
        T result = caseBagLiteral(bagLiteral);
        if (result == null) result = caseLiteral(bagLiteral);
        if (result == null) result = caseBasicTerm(bagLiteral);
        if (result == null) result = caseExpression(bagLiteral);
        if (result == null) result = caseEnumerableTerm(bagLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.MAP_LITERAL:
      {
        MapLiteral mapLiteral = (MapLiteral)theEObject;
        T result = caseMapLiteral(mapLiteral);
        if (result == null) result = caseLiteral(mapLiteral);
        if (result == null) result = caseBasicTerm(mapLiteral);
        if (result == null) result = caseExpression(mapLiteral);
        if (result == null) result = caseEnumerableTerm(mapLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.FOR_ALL_TERM:
      {
        ForAllTerm forAllTerm = (ForAllTerm)theEObject;
        T result = caseForAllTerm(forAllTerm);
        if (result == null) result = caseBasicTerm(forAllTerm);
        if (result == null) result = caseExpression(forAllTerm);
        if (result == null) result = caseEnumerableTerm(forAllTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.EXISTS_TERM:
      {
        ExistsTerm existsTerm = (ExistsTerm)theEObject;
        T result = caseExistsTerm(existsTerm);
        if (result == null) result = caseBasicTerm(existsTerm);
        if (result == null) result = caseExpression(existsTerm);
        if (result == null) result = caseEnumerableTerm(existsTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM:
      {
        SizeOfEnumerableTerm sizeOfEnumerableTerm = (SizeOfEnumerableTerm)theEObject;
        T result = caseSizeOfEnumerableTerm(sizeOfEnumerableTerm);
        if (result == null) result = caseBasicTerm(sizeOfEnumerableTerm);
        if (result == null) result = caseExpression(sizeOfEnumerableTerm);
        if (result == null) result = caseEnumerableTerm(sizeOfEnumerableTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.PICK_TERM:
      {
        PickTerm pickTerm = (PickTerm)theEObject;
        T result = casePickTerm(pickTerm);
        if (result == null) result = caseBasicTerm(pickTerm);
        if (result == null) result = caseExpression(pickTerm);
        if (result == null) result = caseEnumerableTerm(pickTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.CONDITIONAL_TERM:
      {
        ConditionalTerm conditionalTerm = (ConditionalTerm)theEObject;
        T result = caseConditionalTerm(conditionalTerm);
        if (result == null) result = caseBasicTerm(conditionalTerm);
        if (result == null) result = caseExpression(conditionalTerm);
        if (result == null) result = caseEnumerableTerm(conditionalTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.CASE_TERM:
      {
        CaseTerm caseTerm = (CaseTerm)theEObject;
        T result = caseCaseTerm(caseTerm);
        if (result == null) result = caseBasicTerm(caseTerm);
        if (result == null) result = caseExpression(caseTerm);
        if (result == null) result = caseEnumerableTerm(caseTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LET_TERM:
      {
        LetTerm letTerm = (LetTerm)theEObject;
        T result = caseLetTerm(letTerm);
        if (result == null) result = caseBasicTerm(letTerm);
        if (result == null) result = caseExpression(letTerm);
        if (result == null) result = caseEnumerableTerm(letTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.RULE_AS_TERM:
      {
        RuleAsTerm ruleAsTerm = (RuleAsTerm)theEObject;
        T result = caseRuleAsTerm(ruleAsTerm);
        if (result == null) result = caseBasicTerm(ruleAsTerm);
        if (result == null) result = caseExpression(ruleAsTerm);
        if (result == null) result = caseEnumerableTerm(ruleAsTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.RETURN_TERM:
      {
        ReturnTerm returnTerm = (ReturnTerm)theEObject;
        T result = caseReturnTerm(returnTerm);
        if (result == null) result = caseBasicTerm(returnTerm);
        if (result == null) result = caseExpression(returnTerm);
        if (result == null) result = caseEnumerableTerm(returnTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.COMPREHENSION_TERM:
      {
        ComprehensionTerm comprehensionTerm = (ComprehensionTerm)theEObject;
        T result = caseComprehensionTerm(comprehensionTerm);
        if (result == null) result = caseBasicTerm(comprehensionTerm);
        if (result == null) result = caseExpression(comprehensionTerm);
        if (result == null) result = caseEnumerableTerm(comprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.SET_COMPREHENSION_TERM:
      {
        SetComprehensionTerm setComprehensionTerm = (SetComprehensionTerm)theEObject;
        T result = caseSetComprehensionTerm(setComprehensionTerm);
        if (result == null) result = caseComprehensionTerm(setComprehensionTerm);
        if (result == null) result = caseBasicTerm(setComprehensionTerm);
        if (result == null) result = caseExpression(setComprehensionTerm);
        if (result == null) result = caseEnumerableTerm(setComprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LIST_COMPREHENSION_TERM:
      {
        ListComprehensionTerm listComprehensionTerm = (ListComprehensionTerm)theEObject;
        T result = caseListComprehensionTerm(listComprehensionTerm);
        if (result == null) result = caseComprehensionTerm(listComprehensionTerm);
        if (result == null) result = caseBasicTerm(listComprehensionTerm);
        if (result == null) result = caseExpression(listComprehensionTerm);
        if (result == null) result = caseEnumerableTerm(listComprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BAG_COMPREHENSION_TERM:
      {
        BagComprehensionTerm bagComprehensionTerm = (BagComprehensionTerm)theEObject;
        T result = caseBagComprehensionTerm(bagComprehensionTerm);
        if (result == null) result = caseComprehensionTerm(bagComprehensionTerm);
        if (result == null) result = caseBasicTerm(bagComprehensionTerm);
        if (result == null) result = caseExpression(bagComprehensionTerm);
        if (result == null) result = caseEnumerableTerm(bagComprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.MAP_COMPREHENSION_TERM:
      {
        MapComprehensionTerm mapComprehensionTerm = (MapComprehensionTerm)theEObject;
        T result = caseMapComprehensionTerm(mapComprehensionTerm);
        if (result == null) result = caseComprehensionTerm(mapComprehensionTerm);
        if (result == null) result = caseBasicTerm(mapComprehensionTerm);
        if (result == null) result = caseExpression(mapComprehensionTerm);
        if (result == null) result = caseEnumerableTerm(mapComprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.NUMBER_RANGE_TERM:
      {
        NumberRangeTerm numberRangeTerm = (NumberRangeTerm)theEObject;
        T result = caseNumberRangeTerm(numberRangeTerm);
        if (result == null) result = caseComprehensionTerm(numberRangeTerm);
        if (result == null) result = caseBasicTerm(numberRangeTerm);
        if (result == null) result = caseExpression(numberRangeTerm);
        if (result == null) result = caseEnumerableTerm(numberRangeTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.STRUCTURE_TERM:
      {
        StructureTerm structureTerm = (StructureTerm)theEObject;
        T result = caseStructureTerm(structureTerm);
        if (result == null) result = caseBasicTerm(structureTerm);
        if (result == null) result = caseExpression(structureTerm);
        if (result == null) result = caseEnumerableTerm(structureTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.SET_TERM:
      {
        SetTerm setTerm = (SetTerm)theEObject;
        T result = caseSetTerm(setTerm);
        if (result == null) result = caseStructureTerm(setTerm);
        if (result == null) result = caseBasicTerm(setTerm);
        if (result == null) result = caseExpression(setTerm);
        if (result == null) result = caseEnumerableTerm(setTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.LIST_TERM:
      {
        ListTerm listTerm = (ListTerm)theEObject;
        T result = caseListTerm(listTerm);
        if (result == null) result = caseStructureTerm(listTerm);
        if (result == null) result = caseBasicTerm(listTerm);
        if (result == null) result = caseExpression(listTerm);
        if (result == null) result = caseEnumerableTerm(listTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BAG_TERM:
      {
        BagTerm bagTerm = (BagTerm)theEObject;
        T result = caseBagTerm(bagTerm);
        if (result == null) result = caseStructureTerm(bagTerm);
        if (result == null) result = caseBasicTerm(bagTerm);
        if (result == null) result = caseExpression(bagTerm);
        if (result == null) result = caseEnumerableTerm(bagTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.MAP_TERM:
      {
        MapTerm mapTerm = (MapTerm)theEObject;
        T result = caseMapTerm(mapTerm);
        if (result == null) result = caseStructureTerm(mapTerm);
        if (result == null) result = caseBasicTerm(mapTerm);
        if (result == null) result = caseExpression(mapTerm);
        if (result == null) result = caseEnumerableTerm(mapTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseLiteral(stringLiteral);
        if (result == null) result = caseBasicTerm(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = caseEnumerableTerm(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.CHAR_LITERAL:
      {
        CharLiteral charLiteral = (CharLiteral)theEObject;
        T result = caseCharLiteral(charLiteral);
        if (result == null) result = caseLiteral(charLiteral);
        if (result == null) result = caseBasicTerm(charLiteral);
        if (result == null) result = caseExpression(charLiteral);
        if (result == null) result = caseEnumerableTerm(charLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.DOMAIN:
      {
        Domain domain = (Domain)theEObject;
        T result = caseDomain(domain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.STRUCTURED_DOMAIN:
      {
        StructuredDomain structuredDomain = (StructuredDomain)theEObject;
        T result = caseStructuredDomain(structuredDomain);
        if (result == null) result = caseDomain(structuredDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.EXTENDABLE_DOMAIN:
      {
        ExtendableDomain extendableDomain = (ExtendableDomain)theEObject;
        T result = caseExtendableDomain(extendableDomain);
        if (result == null) result = caseDomain(extendableDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BASIC_DOMAIN:
      {
        BasicDomain basicDomain = (BasicDomain)theEObject;
        T result = caseBasicDomain(basicDomain);
        if (result == null) result = caseDomain(basicDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = caseLiteral(numberLiteral);
        if (result == null) result = caseBasicTerm(numberLiteral);
        if (result == null) result = caseExpression(numberLiteral);
        if (result == null) result = caseEnumerableTerm(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.TUPLE_LITERAL:
      {
        TupleLiteral tupleLiteral = (TupleLiteral)theEObject;
        T result = caseTupleLiteral(tupleLiteral);
        if (result == null) result = caseBasicTerm(tupleLiteral);
        if (result == null) result = caseExpression(tupleLiteral);
        if (result == null) result = caseEnumerableTerm(tupleLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.COND_TERNARY_EXPRESSION:
      {
        CondTernaryExpression condTernaryExpression = (CondTernaryExpression)theEObject;
        T result = caseCondTernaryExpression(condTernaryExpression);
        if (result == null) result = caseExpression(condTernaryExpression);
        if (result == null) result = caseEnumerableTerm(condTernaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BINARY_EXPRESSION:
      {
        BinaryExpression binaryExpression = (BinaryExpression)theEObject;
        T result = caseBinaryExpression(binaryExpression);
        if (result == null) result = caseExpression(binaryExpression);
        if (result == null) result = caseEnumerableTerm(binaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.BOOLEAN_NEGATION:
      {
        BooleanNegation booleanNegation = (BooleanNegation)theEObject;
        T result = caseBooleanNegation(booleanNegation);
        if (result == null) result = caseExpression(booleanNegation);
        if (result == null) result = caseEnumerableTerm(booleanNegation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TermDslPackage.ARITHMETIC_SIGNED:
      {
        ArithmeticSigned arithmeticSigned = (ArithmeticSigned)theEObject;
        T result = caseArithmeticSigned(arithmeticSigned);
        if (result == null) result = caseExpression(arithmeticSigned);
        if (result == null) result = caseEnumerableTerm(arithmeticSigned);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicTerm(BasicTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTerm(TupleTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionTerm(FunctionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumerable Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumerable Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerableTerm(EnumerableTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Location Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Location Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocationTerm(LocationTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Kernel Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Kernel Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKernelLiteral(KernelLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalLiteral(IntervalLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLiteral(SetLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListLiteral(ListLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagLiteral(BagLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteral(MapLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For All Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For All Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForAllTerm(ForAllTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exists Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exists Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistsTerm(ExistsTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Size Of Enumerable Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Size Of Enumerable Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSizeOfEnumerableTerm(SizeOfEnumerableTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pick Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pick Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePickTerm(PickTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalTerm(ConditionalTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseTerm(CaseTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetTerm(LetTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule As Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule As Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleAsTerm(RuleAsTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnTerm(ReturnTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComprehensionTerm(ComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetComprehensionTerm(SetComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListComprehensionTerm(ListComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagComprehensionTerm(BagComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapComprehensionTerm(MapComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Range Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Range Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberRangeTerm(NumberRangeTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structure Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structure Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructureTerm(StructureTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetTerm(SetTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListTerm(ListTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagTerm(BagTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapTerm(MapTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Char Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Char Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharLiteral(CharLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomain(Domain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structured Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structured Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructuredDomain(StructuredDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extendable Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extendable Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendableDomain(ExtendableDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicDomain(BasicDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteral(TupleLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Ternary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Ternary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondTernaryExpression(CondTernaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryExpression(BinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Negation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Negation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanNegation(BooleanNegation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Signed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Signed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticSigned(ArithmeticSigned object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //TermDslSwitch
