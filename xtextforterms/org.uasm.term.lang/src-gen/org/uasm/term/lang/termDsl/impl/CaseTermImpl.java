/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.uasm.term.lang.termDsl.CaseTerm;
import org.uasm.term.lang.termDsl.Expression;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Case Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.CaseTermImpl#getCaseTerm <em>Case Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.CaseTermImpl#getTerm <em>Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.CaseTermImpl#getTermAction <em>Term Action</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.CaseTermImpl#getOtherwiseTerm <em>Otherwise Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CaseTermImpl extends BasicTermImpl implements CaseTerm
{
  /**
   * The cached value of the '{@link #getCaseTerm() <em>Case Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseTerm()
   * @generated
   * @ordered
   */
  protected Expression caseTerm;

  /**
   * The cached value of the '{@link #getTerm() <em>Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm()
   * @generated
   * @ordered
   */
  protected EList<Expression> term;

  /**
   * The cached value of the '{@link #getTermAction() <em>Term Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTermAction()
   * @generated
   * @ordered
   */
  protected EList<Expression> termAction;

  /**
   * The cached value of the '{@link #getOtherwiseTerm() <em>Otherwise Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherwiseTerm()
   * @generated
   * @ordered
   */
  protected Expression otherwiseTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaseTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.CASE_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getCaseTerm()
  {
    return caseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCaseTerm(Expression newCaseTerm, NotificationChain msgs)
  {
    Expression oldCaseTerm = caseTerm;
    caseTerm = newCaseTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.CASE_TERM__CASE_TERM, oldCaseTerm, newCaseTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCaseTerm(Expression newCaseTerm)
  {
    if (newCaseTerm != caseTerm)
    {
      NotificationChain msgs = null;
      if (caseTerm != null)
        msgs = ((InternalEObject)caseTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.CASE_TERM__CASE_TERM, null, msgs);
      if (newCaseTerm != null)
        msgs = ((InternalEObject)newCaseTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.CASE_TERM__CASE_TERM, null, msgs);
      msgs = basicSetCaseTerm(newCaseTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.CASE_TERM__CASE_TERM, newCaseTerm, newCaseTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getTerm()
  {
    if (term == null)
    {
      term = new EObjectContainmentEList<Expression>(Expression.class, this, TermDslPackage.CASE_TERM__TERM);
    }
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getTermAction()
  {
    if (termAction == null)
    {
      termAction = new EObjectContainmentEList<Expression>(Expression.class, this, TermDslPackage.CASE_TERM__TERM_ACTION);
    }
    return termAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getOtherwiseTerm()
  {
    return otherwiseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOtherwiseTerm(Expression newOtherwiseTerm, NotificationChain msgs)
  {
    Expression oldOtherwiseTerm = otherwiseTerm;
    otherwiseTerm = newOtherwiseTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.CASE_TERM__OTHERWISE_TERM, oldOtherwiseTerm, newOtherwiseTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOtherwiseTerm(Expression newOtherwiseTerm)
  {
    if (newOtherwiseTerm != otherwiseTerm)
    {
      NotificationChain msgs = null;
      if (otherwiseTerm != null)
        msgs = ((InternalEObject)otherwiseTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.CASE_TERM__OTHERWISE_TERM, null, msgs);
      if (newOtherwiseTerm != null)
        msgs = ((InternalEObject)newOtherwiseTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.CASE_TERM__OTHERWISE_TERM, null, msgs);
      msgs = basicSetOtherwiseTerm(newOtherwiseTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.CASE_TERM__OTHERWISE_TERM, newOtherwiseTerm, newOtherwiseTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.CASE_TERM__CASE_TERM:
        return basicSetCaseTerm(null, msgs);
      case TermDslPackage.CASE_TERM__TERM:
        return ((InternalEList<?>)getTerm()).basicRemove(otherEnd, msgs);
      case TermDslPackage.CASE_TERM__TERM_ACTION:
        return ((InternalEList<?>)getTermAction()).basicRemove(otherEnd, msgs);
      case TermDslPackage.CASE_TERM__OTHERWISE_TERM:
        return basicSetOtherwiseTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.CASE_TERM__CASE_TERM:
        return getCaseTerm();
      case TermDslPackage.CASE_TERM__TERM:
        return getTerm();
      case TermDslPackage.CASE_TERM__TERM_ACTION:
        return getTermAction();
      case TermDslPackage.CASE_TERM__OTHERWISE_TERM:
        return getOtherwiseTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.CASE_TERM__CASE_TERM:
        setCaseTerm((Expression)newValue);
        return;
      case TermDslPackage.CASE_TERM__TERM:
        getTerm().clear();
        getTerm().addAll((Collection<? extends Expression>)newValue);
        return;
      case TermDslPackage.CASE_TERM__TERM_ACTION:
        getTermAction().clear();
        getTermAction().addAll((Collection<? extends Expression>)newValue);
        return;
      case TermDslPackage.CASE_TERM__OTHERWISE_TERM:
        setOtherwiseTerm((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.CASE_TERM__CASE_TERM:
        setCaseTerm((Expression)null);
        return;
      case TermDslPackage.CASE_TERM__TERM:
        getTerm().clear();
        return;
      case TermDslPackage.CASE_TERM__TERM_ACTION:
        getTermAction().clear();
        return;
      case TermDslPackage.CASE_TERM__OTHERWISE_TERM:
        setOtherwiseTerm((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.CASE_TERM__CASE_TERM:
        return caseTerm != null;
      case TermDslPackage.CASE_TERM__TERM:
        return term != null && !term.isEmpty();
      case TermDslPackage.CASE_TERM__TERM_ACTION:
        return termAction != null && !termAction.isEmpty();
      case TermDslPackage.CASE_TERM__OTHERWISE_TERM:
        return otherwiseTerm != null;
    }
    return super.eIsSet(featureID);
  }

} //CaseTermImpl
