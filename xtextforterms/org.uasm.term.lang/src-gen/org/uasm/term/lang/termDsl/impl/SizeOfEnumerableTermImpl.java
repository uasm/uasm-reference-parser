/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.uasm.term.lang.termDsl.EnumerableTerm;
import org.uasm.term.lang.termDsl.SizeOfEnumerableTerm;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Size Of Enumerable Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.SizeOfEnumerableTermImpl#getEnumTerm <em>Enum Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SizeOfEnumerableTermImpl extends BasicTermImpl implements SizeOfEnumerableTerm
{
  /**
   * The cached value of the '{@link #getEnumTerm() <em>Enum Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnumTerm()
   * @generated
   * @ordered
   */
  protected EnumerableTerm enumTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SizeOfEnumerableTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.SIZE_OF_ENUMERABLE_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumerableTerm getEnumTerm()
  {
    return enumTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnumTerm(EnumerableTerm newEnumTerm, NotificationChain msgs)
  {
    EnumerableTerm oldEnumTerm = enumTerm;
    enumTerm = newEnumTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM, oldEnumTerm, newEnumTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnumTerm(EnumerableTerm newEnumTerm)
  {
    if (newEnumTerm != enumTerm)
    {
      NotificationChain msgs = null;
      if (enumTerm != null)
        msgs = ((InternalEObject)enumTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM, null, msgs);
      if (newEnumTerm != null)
        msgs = ((InternalEObject)newEnumTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM, null, msgs);
      msgs = basicSetEnumTerm(newEnumTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM, newEnumTerm, newEnumTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM:
        return basicSetEnumTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM:
        return getEnumTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM:
        setEnumTerm((EnumerableTerm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM:
        setEnumTerm((EnumerableTerm)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.SIZE_OF_ENUMERABLE_TERM__ENUM_TERM:
        return enumTerm != null;
    }
    return super.eIsSet(featureID);
  }

} //SizeOfEnumerableTermImpl
