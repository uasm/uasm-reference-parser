/**
 * generated by Xtext 2.10.0
 */
package org.uasm.term.lang.termDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.uasm.term.lang.termDsl.EnumerableTerm;
import org.uasm.term.lang.termDsl.Expression;
import org.uasm.term.lang.termDsl.PickTerm;
import org.uasm.term.lang.termDsl.TermDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pick Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.PickTermImpl#getVarTerm <em>Var Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.PickTermImpl#getEnumTerm <em>Enum Term</em>}</li>
 *   <li>{@link org.uasm.term.lang.termDsl.impl.PickTermImpl#getTerm <em>Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PickTermImpl extends BasicTermImpl implements PickTerm
{
  /**
   * The default value of the '{@link #getVarTerm() <em>Var Term</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarTerm()
   * @generated
   * @ordered
   */
  protected static final String VAR_TERM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVarTerm() <em>Var Term</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarTerm()
   * @generated
   * @ordered
   */
  protected String varTerm = VAR_TERM_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnumTerm() <em>Enum Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnumTerm()
   * @generated
   * @ordered
   */
  protected EnumerableTerm enumTerm;

  /**
   * The cached value of the '{@link #getTerm() <em>Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm()
   * @generated
   * @ordered
   */
  protected Expression term;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PickTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TermDslPackage.Literals.PICK_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVarTerm()
  {
    return varTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVarTerm(String newVarTerm)
  {
    String oldVarTerm = varTerm;
    varTerm = newVarTerm;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.PICK_TERM__VAR_TERM, oldVarTerm, varTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumerableTerm getEnumTerm()
  {
    return enumTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnumTerm(EnumerableTerm newEnumTerm, NotificationChain msgs)
  {
    EnumerableTerm oldEnumTerm = enumTerm;
    enumTerm = newEnumTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.PICK_TERM__ENUM_TERM, oldEnumTerm, newEnumTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnumTerm(EnumerableTerm newEnumTerm)
  {
    if (newEnumTerm != enumTerm)
    {
      NotificationChain msgs = null;
      if (enumTerm != null)
        msgs = ((InternalEObject)enumTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.PICK_TERM__ENUM_TERM, null, msgs);
      if (newEnumTerm != null)
        msgs = ((InternalEObject)newEnumTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.PICK_TERM__ENUM_TERM, null, msgs);
      msgs = basicSetEnumTerm(newEnumTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.PICK_TERM__ENUM_TERM, newEnumTerm, newEnumTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getTerm()
  {
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerm(Expression newTerm, NotificationChain msgs)
  {
    Expression oldTerm = term;
    term = newTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TermDslPackage.PICK_TERM__TERM, oldTerm, newTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerm(Expression newTerm)
  {
    if (newTerm != term)
    {
      NotificationChain msgs = null;
      if (term != null)
        msgs = ((InternalEObject)term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.PICK_TERM__TERM, null, msgs);
      if (newTerm != null)
        msgs = ((InternalEObject)newTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TermDslPackage.PICK_TERM__TERM, null, msgs);
      msgs = basicSetTerm(newTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TermDslPackage.PICK_TERM__TERM, newTerm, newTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TermDslPackage.PICK_TERM__ENUM_TERM:
        return basicSetEnumTerm(null, msgs);
      case TermDslPackage.PICK_TERM__TERM:
        return basicSetTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TermDslPackage.PICK_TERM__VAR_TERM:
        return getVarTerm();
      case TermDslPackage.PICK_TERM__ENUM_TERM:
        return getEnumTerm();
      case TermDslPackage.PICK_TERM__TERM:
        return getTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TermDslPackage.PICK_TERM__VAR_TERM:
        setVarTerm((String)newValue);
        return;
      case TermDslPackage.PICK_TERM__ENUM_TERM:
        setEnumTerm((EnumerableTerm)newValue);
        return;
      case TermDslPackage.PICK_TERM__TERM:
        setTerm((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.PICK_TERM__VAR_TERM:
        setVarTerm(VAR_TERM_EDEFAULT);
        return;
      case TermDslPackage.PICK_TERM__ENUM_TERM:
        setEnumTerm((EnumerableTerm)null);
        return;
      case TermDslPackage.PICK_TERM__TERM:
        setTerm((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TermDslPackage.PICK_TERM__VAR_TERM:
        return VAR_TERM_EDEFAULT == null ? varTerm != null : !VAR_TERM_EDEFAULT.equals(varTerm);
      case TermDslPackage.PICK_TERM__ENUM_TERM:
        return enumTerm != null;
      case TermDslPackage.PICK_TERM__TERM:
        return term != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (varTerm: ");
    result.append(varTerm);
    result.append(')');
    return result.toString();
  }

} //PickTermImpl
