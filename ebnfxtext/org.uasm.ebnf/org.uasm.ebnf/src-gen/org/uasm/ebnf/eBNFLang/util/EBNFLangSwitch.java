/**
 * generated by Xtext 2.10.0
 */
package org.uasm.ebnf.eBNFLang.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.uasm.ebnf.eBNFLang.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.uasm.ebnf.eBNFLang.EBNFLangPackage
 * @generated
 */
public class EBNFLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EBNFLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EBNFLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = EBNFLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case EBNFLangPackage.EBNF_GRAMMAR:
      {
        EbnfGrammar ebnfGrammar = (EbnfGrammar)theEObject;
        T result = caseEbnfGrammar(ebnfGrammar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.PRODUCTION_RULE:
      {
        ProductionRule productionRule = (ProductionRule)theEObject;
        T result = caseProductionRule(productionRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_ALTERNATIVE:
      {
        Expression_Alternative expression_Alternative = (Expression_Alternative)theEObject;
        T result = caseExpression_Alternative(expression_Alternative);
        if (result == null) result = caseExpression(expression_Alternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_CONCATENATION:
      {
        Expression_Concatenation expression_Concatenation = (Expression_Concatenation)theEObject;
        T result = caseExpression_Concatenation(expression_Concatenation);
        if (result == null) result = caseExpression(expression_Concatenation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_EXCEPTION:
      {
        Expression_Exception expression_Exception = (Expression_Exception)theEObject;
        T result = caseExpression_Exception(expression_Exception);
        if (result == null) result = caseExpression(expression_Exception);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_REPETITION:
      {
        Expression_Repetition expression_Repetition = (Expression_Repetition)theEObject;
        T result = caseExpression_Repetition(expression_Repetition);
        if (result == null) result = caseExpression(expression_Repetition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_RULE_REFERENCE:
      {
        Expression_Rule_Reference expression_Rule_Reference = (Expression_Rule_Reference)theEObject;
        T result = caseExpression_Rule_Reference(expression_Rule_Reference);
        if (result == null) result = caseExpression(expression_Rule_Reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_SPECIAL_SEQUENCE:
      {
        Expression_Special_Sequence expression_Special_Sequence = (Expression_Special_Sequence)theEObject;
        T result = caseExpression_Special_Sequence(expression_Special_Sequence);
        if (result == null) result = caseExpression(expression_Special_Sequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_TERMINAL_SYMBOL:
      {
        Expression_Terminal_Symbol expression_Terminal_Symbol = (Expression_Terminal_Symbol)theEObject;
        T result = caseExpression_Terminal_Symbol(expression_Terminal_Symbol);
        if (result == null) result = caseExpression(expression_Terminal_Symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_REPETITION_GROUP:
      {
        Expression_Repetition_Group expression_Repetition_Group = (Expression_Repetition_Group)theEObject;
        T result = caseExpression_Repetition_Group(expression_Repetition_Group);
        if (result == null) result = caseExpression(expression_Repetition_Group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_OPTIONAL_GROUP:
      {
        Expression_Optional_Group expression_Optional_Group = (Expression_Optional_Group)theEObject;
        T result = caseExpression_Optional_Group(expression_Optional_Group);
        if (result == null) result = caseExpression(expression_Optional_Group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EBNFLangPackage.EXPRESSION_GROUP:
      {
        Expression_Group expression_Group = (Expression_Group)theEObject;
        T result = caseExpression_Group(expression_Group);
        if (result == null) result = caseExpression(expression_Group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ebnf Grammar</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ebnf Grammar</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEbnfGrammar(EbnfGrammar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Production Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Production Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProductionRule(ProductionRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Alternative(Expression_Alternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Concatenation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Concatenation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Concatenation(Expression_Concatenation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Exception</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Exception</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Exception(Expression_Exception object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Repetition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Repetition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Repetition(Expression_Repetition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Rule Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Rule Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Rule_Reference(Expression_Rule_Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Special Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Special Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Special_Sequence(Expression_Special_Sequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Terminal Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Terminal Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Terminal_Symbol(Expression_Terminal_Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Repetition Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Repetition Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Repetition_Group(Expression_Repetition_Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Optional Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Optional Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Optional_Group(Expression_Optional_Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_Group(Expression_Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //EBNFLangSwitch
