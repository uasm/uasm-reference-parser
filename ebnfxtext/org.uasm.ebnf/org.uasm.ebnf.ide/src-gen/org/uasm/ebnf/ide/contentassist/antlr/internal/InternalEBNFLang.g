/*
 * generated by Xtext 2.10.0
 */
grammar InternalEBNFLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.uasm.ebnf.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.uasm.ebnf.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.uasm.ebnf.services.EBNFLangGrammarAccess;

}
@parser::members {
	private EBNFLangGrammarAccess grammarAccess;

	public void setGrammarAccess(EBNFLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEbnfGrammar
entryRuleEbnfGrammar
:
{ before(grammarAccess.getEbnfGrammarRule()); }
	 ruleEbnfGrammar
{ after(grammarAccess.getEbnfGrammarRule()); } 
	 EOF 
;

// Rule EbnfGrammar
ruleEbnfGrammar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEbnfGrammarAccess().getGroup()); }
		(rule__EbnfGrammar__Group__0)
		{ after(grammarAccess.getEbnfGrammarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProductionRule
entryRuleProductionRule
:
{ before(grammarAccess.getProductionRuleRule()); }
	 ruleProductionRule
{ after(grammarAccess.getProductionRuleRule()); } 
	 EOF 
;

// Rule ProductionRule
ruleProductionRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProductionRuleAccess().getGroup()); }
		(rule__ProductionRule__Group__0)
		{ after(grammarAccess.getProductionRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getExpression_AlternativeParserRuleCall()); }
		ruleExpression_Alternative
		{ after(grammarAccess.getExpressionAccess().getExpression_AlternativeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Alternative
entryRuleExpression_Alternative
:
{ before(grammarAccess.getExpression_AlternativeRule()); }
	 ruleExpression_Alternative
{ after(grammarAccess.getExpression_AlternativeRule()); } 
	 EOF 
;

// Rule Expression_Alternative
ruleExpression_Alternative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_AlternativeAccess().getGroup()); }
		(rule__Expression_Alternative__Group__0)
		{ after(grammarAccess.getExpression_AlternativeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Concatenation
entryRuleExpression_Concatenation
:
{ before(grammarAccess.getExpression_ConcatenationRule()); }
	 ruleExpression_Concatenation
{ after(grammarAccess.getExpression_ConcatenationRule()); } 
	 EOF 
;

// Rule Expression_Concatenation
ruleExpression_Concatenation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_ConcatenationAccess().getGroup()); }
		(rule__Expression_Concatenation__Group__0)
		{ after(grammarAccess.getExpression_ConcatenationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Exception
entryRuleExpression_Exception
:
{ before(grammarAccess.getExpression_ExceptionRule()); }
	 ruleExpression_Exception
{ after(grammarAccess.getExpression_ExceptionRule()); } 
	 EOF 
;

// Rule Expression_Exception
ruleExpression_Exception 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_ExceptionAccess().getGroup()); }
		(rule__Expression_Exception__Group__0)
		{ after(grammarAccess.getExpression_ExceptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Repetition
entryRuleExpression_Repetition
:
{ before(grammarAccess.getExpression_RepetitionRule()); }
	 ruleExpression_Repetition
{ after(grammarAccess.getExpression_RepetitionRule()); } 
	 EOF 
;

// Rule Expression_Repetition
ruleExpression_Repetition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_RepetitionAccess().getAlternatives()); }
		(rule__Expression_Repetition__Alternatives)
		{ after(grammarAccess.getExpression_RepetitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Terminal
entryRuleExpression_Terminal
:
{ before(grammarAccess.getExpression_TerminalRule()); }
	 ruleExpression_Terminal
{ after(grammarAccess.getExpression_TerminalRule()); } 
	 EOF 
;

// Rule Expression_Terminal
ruleExpression_Terminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getAlternatives()); }
		(rule__Expression_Terminal__Alternatives)
		{ after(grammarAccess.getExpression_TerminalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Rule_Reference
entryRuleExpression_Rule_Reference
:
{ before(grammarAccess.getExpression_Rule_ReferenceRule()); }
	 ruleExpression_Rule_Reference
{ after(grammarAccess.getExpression_Rule_ReferenceRule()); } 
	 EOF 
;

// Rule Expression_Rule_Reference
ruleExpression_Rule_Reference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_Rule_ReferenceAccess().getGroup()); }
		(rule__Expression_Rule_Reference__Group__0)
		{ after(grammarAccess.getExpression_Rule_ReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Special_Sequence
entryRuleExpression_Special_Sequence
:
{ before(grammarAccess.getExpression_Special_SequenceRule()); }
	 ruleExpression_Special_Sequence
{ after(grammarAccess.getExpression_Special_SequenceRule()); } 
	 EOF 
;

// Rule Expression_Special_Sequence
ruleExpression_Special_Sequence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_Special_SequenceAccess().getGroup()); }
		(rule__Expression_Special_Sequence__Group__0)
		{ after(grammarAccess.getExpression_Special_SequenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Terminal_Symbol
entryRuleExpression_Terminal_Symbol
:
{ before(grammarAccess.getExpression_Terminal_SymbolRule()); }
	 ruleExpression_Terminal_Symbol
{ after(grammarAccess.getExpression_Terminal_SymbolRule()); } 
	 EOF 
;

// Rule Expression_Terminal_Symbol
ruleExpression_Terminal_Symbol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_Terminal_SymbolAccess().getGroup()); }
		(rule__Expression_Terminal_Symbol__Group__0)
		{ after(grammarAccess.getExpression_Terminal_SymbolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Repetition_Group
entryRuleExpression_Repetition_Group
:
{ before(grammarAccess.getExpression_Repetition_GroupRule()); }
	 ruleExpression_Repetition_Group
{ after(grammarAccess.getExpression_Repetition_GroupRule()); } 
	 EOF 
;

// Rule Expression_Repetition_Group
ruleExpression_Repetition_Group 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_Repetition_GroupAccess().getGroup()); }
		(rule__Expression_Repetition_Group__Group__0)
		{ after(grammarAccess.getExpression_Repetition_GroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Optional_Group
entryRuleExpression_Optional_Group
:
{ before(grammarAccess.getExpression_Optional_GroupRule()); }
	 ruleExpression_Optional_Group
{ after(grammarAccess.getExpression_Optional_GroupRule()); } 
	 EOF 
;

// Rule Expression_Optional_Group
ruleExpression_Optional_Group 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_Optional_GroupAccess().getGroup()); }
		(rule__Expression_Optional_Group__Group__0)
		{ after(grammarAccess.getExpression_Optional_GroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression_Group
entryRuleExpression_Group
:
{ before(grammarAccess.getExpression_GroupRule()); }
	 ruleExpression_Group
{ after(grammarAccess.getExpression_GroupRule()); } 
	 EOF 
;

// Rule Expression_Group
ruleExpression_Group 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression_GroupAccess().getGroup()); }
		(rule__Expression_Group__Group__0)
		{ after(grammarAccess.getExpression_GroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_RepetitionAccess().getExpression_TerminalParserRuleCall_0()); }
		ruleExpression_Terminal
		{ after(grammarAccess.getExpression_RepetitionAccess().getExpression_TerminalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_RepetitionAccess().getGroup_1()); }
		(rule__Expression_Repetition__Group_1__0)
		{ after(grammarAccess.getExpression_RepetitionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_Rule_ReferenceParserRuleCall_0()); }
		ruleExpression_Rule_Reference
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_Rule_ReferenceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_Terminal_SymbolParserRuleCall_1()); }
		ruleExpression_Terminal_Symbol
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_Terminal_SymbolParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_Repetition_GroupParserRuleCall_2()); }
		ruleExpression_Repetition_Group
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_Repetition_GroupParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_Optional_GroupParserRuleCall_3()); }
		ruleExpression_Optional_Group
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_Optional_GroupParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_GroupParserRuleCall_4()); }
		ruleExpression_Group
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_GroupParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpression_TerminalAccess().getExpression_Special_SequenceParserRuleCall_5()); }
		ruleExpression_Special_Sequence
		{ after(grammarAccess.getExpression_TerminalAccess().getExpression_Special_SequenceParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EbnfGrammar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EbnfGrammar__Group__0__Impl
	rule__EbnfGrammar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EbnfGrammar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEbnfGrammarAccess().getEbnfGrammarAction_0()); }
	()
	{ after(grammarAccess.getEbnfGrammarAccess().getEbnfGrammarAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EbnfGrammar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EbnfGrammar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EbnfGrammar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEbnfGrammarAccess().getRulesAssignment_1()); }
	(rule__EbnfGrammar__RulesAssignment_1)*
	{ after(grammarAccess.getEbnfGrammarAccess().getRulesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProductionRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProductionRule__Group__0__Impl
	rule__ProductionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductionRuleAccess().getNameAssignment_0()); }
	(rule__ProductionRule__NameAssignment_0)
	{ after(grammarAccess.getProductionRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProductionRule__Group__1__Impl
	rule__ProductionRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductionRuleAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getProductionRuleAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProductionRule__Group__2__Impl
	rule__ProductionRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductionRuleAccess().getExprAssignment_2()); }
	(rule__ProductionRule__ExprAssignment_2)
	{ after(grammarAccess.getProductionRuleAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProductionRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductionRuleAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getProductionRuleAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Alternative__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group__0__Impl
	rule__Expression_Alternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_AlternativeAccess().getExpression_ConcatenationParserRuleCall_0()); }
	ruleExpression_Concatenation
	{ after(grammarAccess.getExpression_AlternativeAccess().getExpression_ConcatenationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_AlternativeAccess().getGroup_1()); }
	(rule__Expression_Alternative__Group_1__0)?
	{ after(grammarAccess.getExpression_AlternativeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Alternative__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group_1__0__Impl
	rule__Expression_Alternative__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_AlternativeAccess().getExpression_AlternativeElementsAction_1_0()); }
	()
	{ after(grammarAccess.getExpression_AlternativeAccess().getExpression_AlternativeElementsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getExpression_AlternativeAccess().getGroup_1_1()); }
		(rule__Expression_Alternative__Group_1_1__0)
		{ after(grammarAccess.getExpression_AlternativeAccess().getGroup_1_1()); }
	)
	(
		{ before(grammarAccess.getExpression_AlternativeAccess().getGroup_1_1()); }
		(rule__Expression_Alternative__Group_1_1__0)*
		{ after(grammarAccess.getExpression_AlternativeAccess().getGroup_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Alternative__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group_1_1__0__Impl
	rule__Expression_Alternative__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_AlternativeAccess().getVerticalLineKeyword_1_1_0()); }
	'|'
	{ after(grammarAccess.getExpression_AlternativeAccess().getVerticalLineKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Alternative__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_AlternativeAccess().getElementsAssignment_1_1_1()); }
	(rule__Expression_Alternative__ElementsAssignment_1_1_1)
	{ after(grammarAccess.getExpression_AlternativeAccess().getElementsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Concatenation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group__0__Impl
	rule__Expression_Concatenation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ConcatenationAccess().getExpression_ExceptionParserRuleCall_0()); }
	ruleExpression_Exception
	{ after(grammarAccess.getExpression_ConcatenationAccess().getExpression_ExceptionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ConcatenationAccess().getGroup_1()); }
	(rule__Expression_Concatenation__Group_1__0)?
	{ after(grammarAccess.getExpression_ConcatenationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Concatenation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group_1__0__Impl
	rule__Expression_Concatenation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ConcatenationAccess().getExpression_ConcatenationElementsAction_1_0()); }
	()
	{ after(grammarAccess.getExpression_ConcatenationAccess().getExpression_ConcatenationElementsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getExpression_ConcatenationAccess().getGroup_1_1()); }
		(rule__Expression_Concatenation__Group_1_1__0)
		{ after(grammarAccess.getExpression_ConcatenationAccess().getGroup_1_1()); }
	)
	(
		{ before(grammarAccess.getExpression_ConcatenationAccess().getGroup_1_1()); }
		(rule__Expression_Concatenation__Group_1_1__0)*
		{ after(grammarAccess.getExpression_ConcatenationAccess().getGroup_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Concatenation__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group_1_1__0__Impl
	rule__Expression_Concatenation__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ConcatenationAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getExpression_ConcatenationAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Concatenation__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ConcatenationAccess().getElementsAssignment_1_1_1()); }
	(rule__Expression_Concatenation__ElementsAssignment_1_1_1)
	{ after(grammarAccess.getExpression_ConcatenationAccess().getElementsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Exception__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Exception__Group__0__Impl
	rule__Expression_Exception__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ExceptionAccess().getExpression_RepetitionParserRuleCall_0()); }
	ruleExpression_Repetition
	{ after(grammarAccess.getExpression_ExceptionAccess().getExpression_RepetitionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Exception__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ExceptionAccess().getGroup_1()); }
	(rule__Expression_Exception__Group_1__0)*
	{ after(grammarAccess.getExpression_ExceptionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Exception__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Exception__Group_1__0__Impl
	rule__Expression_Exception__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ExceptionAccess().getExpression_ExceptionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpression_ExceptionAccess().getExpression_ExceptionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Exception__Group_1__1__Impl
	rule__Expression_Exception__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ExceptionAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getExpression_ExceptionAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Exception__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_ExceptionAccess().getRightAssignment_1_2()); }
	(rule__Expression_Exception__RightAssignment_1_2)
	{ after(grammarAccess.getExpression_ExceptionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Repetition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition__Group_1__0__Impl
	rule__Expression_Repetition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_RepetitionAccess().getExpression_RepetitionAction_1_0()); }
	()
	{ after(grammarAccess.getExpression_RepetitionAccess().getExpression_RepetitionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition__Group_1__1__Impl
	rule__Expression_Repetition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_RepetitionAccess().getRepetitionsAssignment_1_1()); }
	(rule__Expression_Repetition__RepetitionsAssignment_1_1)
	{ after(grammarAccess.getExpression_RepetitionAccess().getRepetitionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition__Group_1__2__Impl
	rule__Expression_Repetition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_RepetitionAccess().getAsteriskKeyword_1_2()); }
	'*'
	{ after(grammarAccess.getExpression_RepetitionAccess().getAsteriskKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_RepetitionAccess().getExprAssignment_1_3()); }
	(rule__Expression_Repetition__ExprAssignment_1_3)
	{ after(grammarAccess.getExpression_RepetitionAccess().getExprAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Rule_Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Rule_Reference__Group__0__Impl
	rule__Expression_Rule_Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Rule_Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Rule_ReferenceAccess().getExpression_Rule_ReferenceAction_0()); }
	()
	{ after(grammarAccess.getExpression_Rule_ReferenceAccess().getExpression_Rule_ReferenceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Rule_Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Rule_Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Rule_Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleAssignment_1()); }
	(rule__Expression_Rule_Reference__RuleAssignment_1)
	{ after(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Special_Sequence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Special_Sequence__Group__0__Impl
	rule__Expression_Special_Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Special_Sequence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Special_SequenceAccess().getExpression_Special_SequenceAction_0()); }
	()
	{ after(grammarAccess.getExpression_Special_SequenceAccess().getExpression_Special_SequenceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Special_Sequence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Special_Sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Special_Sequence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Special_SequenceAccess().getTextAssignment_1()); }
	(rule__Expression_Special_Sequence__TextAssignment_1)
	{ after(grammarAccess.getExpression_Special_SequenceAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Terminal_Symbol__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Terminal_Symbol__Group__0__Impl
	rule__Expression_Terminal_Symbol__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal_Symbol__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Terminal_SymbolAccess().getExpression_Terminal_SymbolAction_0()); }
	()
	{ after(grammarAccess.getExpression_Terminal_SymbolAccess().getExpression_Terminal_SymbolAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal_Symbol__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Terminal_Symbol__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal_Symbol__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Terminal_SymbolAccess().getTextAssignment_1()); }
	(rule__Expression_Terminal_Symbol__TextAssignment_1)
	{ after(grammarAccess.getExpression_Terminal_SymbolAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Repetition_Group__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition_Group__Group__0__Impl
	rule__Expression_Repetition_Group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Repetition_GroupAccess().getExpression_Repetition_GroupAction_0()); }
	()
	{ after(grammarAccess.getExpression_Repetition_GroupAccess().getExpression_Repetition_GroupAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition_Group__Group__1__Impl
	rule__Expression_Repetition_Group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Repetition_GroupAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getExpression_Repetition_GroupAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition_Group__Group__2__Impl
	rule__Expression_Repetition_Group__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Repetition_GroupAccess().getExprAssignment_2()); }
	(rule__Expression_Repetition_Group__ExprAssignment_2)
	{ after(grammarAccess.getExpression_Repetition_GroupAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition_Group__Group__3__Impl
	rule__Expression_Repetition_Group__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Repetition_GroupAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getExpression_Repetition_GroupAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Repetition_Group__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneAssignment_4()); }
	(rule__Expression_Repetition_Group__AtLeastOneAssignment_4)?
	{ after(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Optional_Group__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Optional_Group__Group__0__Impl
	rule__Expression_Optional_Group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Optional_GroupAccess().getExpression_Optional_GroupAction_0()); }
	()
	{ after(grammarAccess.getExpression_Optional_GroupAccess().getExpression_Optional_GroupAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Optional_Group__Group__1__Impl
	rule__Expression_Optional_Group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Optional_GroupAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getExpression_Optional_GroupAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Optional_Group__Group__2__Impl
	rule__Expression_Optional_Group__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Optional_GroupAccess().getExprAssignment_2()); }
	(rule__Expression_Optional_Group__ExprAssignment_2)
	{ after(grammarAccess.getExpression_Optional_GroupAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Optional_Group__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_Optional_GroupAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getExpression_Optional_GroupAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Group__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Group__Group__0__Impl
	rule__Expression_Group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_GroupAccess().getExpression_GroupAction_0()); }
	()
	{ after(grammarAccess.getExpression_GroupAccess().getExpression_GroupAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Group__Group__1__Impl
	rule__Expression_Group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_GroupAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getExpression_GroupAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Group__Group__2__Impl
	rule__Expression_Group__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_GroupAccess().getExprAssignment_2()); }
	(rule__Expression_Group__ExprAssignment_2)
	{ after(grammarAccess.getExpression_GroupAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression_Group__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression_GroupAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getExpression_GroupAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EbnfGrammar__RulesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEbnfGrammarAccess().getRulesProductionRuleParserRuleCall_1_0()); }
		ruleProductionRule
		{ after(grammarAccess.getEbnfGrammarAccess().getRulesProductionRuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductionRuleAccess().getNameNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getProductionRuleAccess().getNameNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductionRule__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductionRuleAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getProductionRuleAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Alternative__ElementsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_AlternativeAccess().getElementsExpression_ConcatenationParserRuleCall_1_1_1_0()); }
		ruleExpression_Concatenation
		{ after(grammarAccess.getExpression_AlternativeAccess().getElementsExpression_ConcatenationParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Concatenation__ElementsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_ConcatenationAccess().getElementsExpression_ExceptionParserRuleCall_1_1_1_0()); }
		ruleExpression_Exception
		{ after(grammarAccess.getExpression_ConcatenationAccess().getElementsExpression_ExceptionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Exception__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_ExceptionAccess().getRightExpression_RepetitionParserRuleCall_1_2_0()); }
		ruleExpression_Repetition
		{ after(grammarAccess.getExpression_ExceptionAccess().getRightExpression_RepetitionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__RepetitionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_RepetitionAccess().getRepetitionsNUMBERTerminalRuleCall_1_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getExpression_RepetitionAccess().getRepetitionsNUMBERTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition__ExprAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_RepetitionAccess().getExprExpression_TerminalParserRuleCall_1_3_0()); }
		ruleExpression_Terminal
		{ after(grammarAccess.getExpression_RepetitionAccess().getExprExpression_TerminalParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Rule_Reference__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleProductionRuleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleProductionRuleNAMETerminalRuleCall_1_0_1()); }
			RULE_NAME
			{ after(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleProductionRuleNAMETerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getExpression_Rule_ReferenceAccess().getRuleProductionRuleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Special_Sequence__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Special_SequenceAccess().getTextSPECIAL_SEQUENCETerminalRuleCall_1_0()); }
		RULE_SPECIAL_SEQUENCE
		{ after(grammarAccess.getExpression_Special_SequenceAccess().getTextSPECIAL_SEQUENCETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal_Symbol__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Terminal_SymbolAccess().getTextTERMINAL_SYMBOLTerminalRuleCall_1_0()); }
		RULE_TERMINAL_SYMBOL
		{ after(grammarAccess.getExpression_Terminal_SymbolAccess().getTextTERMINAL_SYMBOLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Repetition_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getExpression_Repetition_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Repetition_Group__AtLeastOneAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneHyphenMinusKeyword_4_0()); }
		(
			{ before(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneHyphenMinusKeyword_4_0()); }
			'-'
			{ after(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneHyphenMinusKeyword_4_0()); }
		)
		{ after(grammarAccess.getExpression_Repetition_GroupAccess().getAtLeastOneHyphenMinusKeyword_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Optional_Group__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_Optional_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getExpression_Optional_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Group__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getExpression_GroupAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_NUMBER : '1'..'9' ('0'..'9')*;

RULE_NAME : ('a'..'z'|'A'..'Z'|'_')+;

RULE_TERMINAL_SYMBOL : ('"' ~('"')+ '"'|'\'' ~('\'')+ '\'');

RULE_SPECIAL_SEQUENCE : '?' ~('?')+ '?';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
